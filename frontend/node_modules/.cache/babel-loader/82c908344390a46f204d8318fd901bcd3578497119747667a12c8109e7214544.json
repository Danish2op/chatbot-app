{"ast":null,"code":"import { NhostClient as C, addSecurityKeyPromise as M, createChangeEmailMachine as N, changeEmailPromise as R, createChangePasswordMachine as K, changePasswordPromise as V, createEnableMfaMachine as D, generateQrCodePromise as F, activateMfaPromise as _, disableMfaPromise as q, createFileUploadMachine as H, uploadFilePromise as Q, createMultipleFilesUploadMachine as $, uploadMultipleFilesPromise as j, encodeQueryParameters as G, rewriteRedirectTo as J, createResetPasswordMachine as Y, resetPasswordPromise as W, createSendVerificationEmailMachine as z, sendVerificationEmailPromise as B, signInAnonymousPromise as X, signInEmailPasswordPromise as Z, signInMfaTotpPromise as b, signInEmailPasswordlessPromise as ee, signInEmailSecurityKeyPromise as te, elevateEmailSecurityKeyPromise as se, signInPATPromise as ne, signInSmsPasswordlessPromise as oe, signInSmsPasswordlessOtpPromise as k, signOutPromise as re, signUpEmailPasswordPromise as ce, signUpEmailSecurityKeyPromise as ie, signInEmailOTPPromise as ae, verifyEmailOTPPromise as ue, signInIdTokenPromise as le, linkIdTokenPromise as de, signInSecurityKeyPromise as he } from \"@nhost/nhost-js\";\nimport { NHOST_REFRESH_TOKEN_KEY as ht } from \"@nhost/nhost-js\";\nimport me, { createContext as ge, useRef as Ee, useEffect as T, useContext as y, createElement as O, Fragment as w, useState as x, useMemo as P, useCallback as fe } from \"react\";\nimport { useInterpret as S, useSelector as n } from \"@xstate/react\";\nimport { jwtDecode as pe } from \"jwt-decode\";\nconst ve = C;\nclass we extends ve {\n  constructor(t) {\n    super({\n      ...t,\n      start: !1\n    });\n  }\n}\nconst I = ge({}),\n  xe = ({\n    nhost: e,\n    initial: t,\n    ...r\n  }) => {\n    const i = S(e.auth.client.machine, {\n      devTools: e.devTools\n    });\n    e.auth.client.start({\n      interpreter: i,\n      initialSession: t,\n      devTools: e.devTools\n    });\n    const d = Ee(!0);\n    return T(() => {\n      d.current ? d.current = !1 : t && i.send(\"SESSION_UPDATE\", {\n        data: {\n          session: t\n        }\n      });\n    }, [t, i]), /* @__PURE__ */me.createElement(I.Provider, {\n      value: e\n    }, r.children);\n  },\n  Ae = xe,\n  p = () => {\n    var r;\n    const t = (r = y(I).auth) == null ? void 0 : r.client.interpreter;\n    if (!t) throw Error(\"Could not find the Nhost auth client. Did you wrap your app in <NhostProvider />?\");\n    return t;\n  },\n  A = () => {\n    const e = p();\n    return n(e, t => ({\n      isAuthenticated: t.matches({\n        authentication: \"signedIn\"\n      }),\n      isLoading: t.hasTag(\"loading\"),\n      error: t.context.errors.authentication || null,\n      isError: t.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }),\n      connectionAttempts: t.context.importTokenAttempts\n    }), (t, r) => t.isAuthenticated === r.isAuthenticated && t.isLoading === r.isLoading && t.connectionAttempts === r.connectionAttempts);\n  };\nfunction Ue({\n  children: e\n}) {\n  const {\n    isAuthenticated: t\n  } = A();\n  return t ? O(w, null, e) : null;\n}\nfunction Le({\n  children: e\n}) {\n  const {\n    isAuthenticated: t\n  } = A();\n  return t ? null : O(w, null, e);\n}\nconst U = () => {\n    const e = p();\n    return n(e, t => t.context.accessToken.value);\n  },\n  v = () => y(I),\n  Ce = () => {\n    const e = v(),\n      [t, r] = x(null),\n      i = !t,\n      d = !!t,\n      [l, h] = x(!1);\n    return {\n      add: async a => {\n        h(!0);\n        const s = await M(e.auth.client, a),\n          {\n            error: o\n          } = s;\n        return o && r(o), h(!1), s;\n      },\n      isLoading: l,\n      isSuccess: i,\n      isError: d,\n      error: t\n    };\n  },\n  Me = () => {\n    const e = p(),\n      [t, r] = x(!!e.status && e.getSnapshot().matches({\n        authentication: \"signedIn\"\n      }));\n    return T(() => e.subscribe(d => {\n      const l = d.matches({\n        authentication: \"signedIn\"\n      });\n      r(l);\n    }).unsubscribe, [e]), t;\n  };\nfunction Ne(e) {\n  const t = v(),\n    r = P(() => N(t.auth.client), [t]),\n    i = S(r),\n    d = n(i, s => s.matches(\"requesting\")),\n    l = n(i, s => s.context.error),\n    h = n(i, s => s.matches(\"idle.error\")),\n    m = n(i, s => s.matches(\"idle.success\"));\n  return {\n    changeEmail: fe(async (s, o = e) => R(i, s, o), [i, e]),\n    isLoading: d,\n    needsEmailVerification: m,\n    isError: h,\n    error: l\n  };\n}\nconst Re = () => {\n    const e = v(),\n      t = P(() => K(e.auth.client), [e]),\n      r = S(t),\n      i = n(r, a => a.matches({\n        idle: \"error\"\n      })),\n      d = n(r, a => a.matches({\n        idle: \"success\"\n      })),\n      l = n(r, a => a.context.error),\n      h = n(r, a => a.matches(\"requesting\"));\n    return {\n      changePassword: a => V(r, a),\n      isLoading: h,\n      isSuccess: d,\n      isError: i,\n      error: l\n    };\n  },\n  Ke = () => {\n    const e = v(),\n      t = P(() => D(e.auth.client), [e]),\n      r = S(t),\n      i = n(r, f => f.matches({\n        idle: \"error\"\n      }) || f.matches({\n        generated: {\n          idle: \"error\"\n        }\n      })),\n      d = n(r, f => f.matches(\"generating\")),\n      l = n(r, f => f.matches(\"generated\")),\n      h = n(r, f => f.matches({\n        generated: \"activating\"\n      })),\n      m = n(r, f => f.matches({\n        generated: \"activated\"\n      })),\n      a = n(r, f => f.matches(\"disabling\")),\n      s = n(r, f => f.context.error),\n      o = n(r, f => f.context.imageUrl || \"\"),\n      c = n(r, f => f.context.secret || \"\");\n    return {\n      generateQrCode: () => F(r),\n      isGenerating: d,\n      qrCodeDataUrl: o,\n      isGenerated: l,\n      activateMfa: f => _(r, f),\n      isActivating: h,\n      isActivated: m,\n      isDisabling: a,\n      isError: i,\n      error: s,\n      disableMfa: f => q(r, f),\n      totpSecret: c\n    };\n  },\n  Se = () => {\n    const e = U();\n    return e ? pe(e) : null;\n  },\n  Pe = e => {\n    const t = v(),\n      r = g => {\n        e.send({\n          type: \"ADD\",\n          file: g.file,\n          bucketId: g.bucketId || E\n        });\n      },\n      i = g => Q({\n        url: t.storage.url,\n        accessToken: t.auth.getAccessToken(),\n        adminSecret: t.adminSecret,\n        ...g\n      }, e),\n      d = () => {\n        e.send(\"CANCEL\");\n      },\n      l = () => {\n        e.send(\"DESTROY\");\n      },\n      h = n(e, g => g.matches(\"uploading\")),\n      m = n(e, g => g.matches(\"uploaded\")),\n      a = n(e, g => g.matches(\"error\")),\n      s = n(e, g => g.context.error || null),\n      o = n(e, g => g.context.progress),\n      c = n(e, g => g.context.id),\n      E = n(e, g => g.context.bucketId),\n      u = n(e, g => {\n        var f;\n        return (f = g.context.file) == null ? void 0 : f.name;\n      });\n    return {\n      add: r,\n      upload: i,\n      cancel: d,\n      destroy: l,\n      isUploaded: m,\n      isUploading: h,\n      isError: a,\n      error: s,\n      progress: o,\n      id: c,\n      bucketId: E,\n      name: u\n    };\n  },\n  Ve = () => {\n    const e = S(H);\n    return Pe(e);\n  },\n  L = () => {\n    const e = Se();\n    return (e == null ? void 0 : e[\"https://hasura.io/jwt/claims\"]) || null;\n  },\n  De = e => {\n    const t = L();\n    return (t == null ? void 0 : t[e.startsWith(\"x-hasura-\") ? e : `x-hasura-${e}`]) || null;\n  },\n  Fe = () => {\n    const e = v(),\n      [t, r] = x([]),\n      i = S($, {}, u => {\n        u.event.type === \"UPLOAD_ERROR\" ? r(u.context.files.filter(g => {\n          var f;\n          return (f = g.getSnapshot()) == null ? void 0 : f.context.error;\n        })) : (u.matches(\"uploaded\") || u.event.type === \"CLEAR\") && t.length > 0 && r([]);\n      }),\n      d = u => {\n        i.send({\n          type: \"ADD\",\n          ...u\n        });\n      },\n      l = u => j({\n        url: e.storage.url,\n        accessToken: e.auth.getAccessToken(),\n        adminSecret: e.adminSecret,\n        ...u\n      }, i),\n      h = () => {\n        i.send(\"CANCEL\");\n      },\n      m = () => {\n        i.send(\"CLEAR\");\n      },\n      a = n(i, u => u.matches(\"uploading\")),\n      s = n(i, u => u.matches(\"uploaded\")),\n      o = n(i, u => u.matches(\"error\")),\n      c = n(i, u => u.context.progress),\n      E = n(i, u => u.context.files);\n    return {\n      upload: l,\n      add: d,\n      clear: m,\n      cancel: h,\n      progress: c,\n      isUploaded: s,\n      isUploading: a,\n      files: E,\n      isError: o,\n      errors: t\n    };\n  },\n  _e = e => {\n    const [t, r] = x(!0),\n      i = U();\n    T(() => {\n      r(!1);\n    }, []);\n    const d = y(I);\n    return new Proxy({}, {\n      get(l, h) {\n        let m = `${d.auth.client.backendUrl}/signin/provider/${h}`;\n        const a = e != null && e.connect ? {\n          connect: i\n        } : {};\n        return G(m, J(t ? void 0 : d.auth.client.clientUrl, {\n          ...e,\n          ...a\n        }));\n      }\n    });\n  },\n  qe = e => {\n    const t = v(),\n      r = P(() => Y(t.auth.client), [t]),\n      i = S(r),\n      d = n(i, s => s.matches(\"requesting\")),\n      l = n(i, s => s.context.error),\n      h = n(i, s => s.matches(\"idle.error\")),\n      m = n(i, s => s.matches(\"idle.success\"));\n    return {\n      resetPassword: (s, o = e) => W(i, s, o),\n      isLoading: d,\n      isSent: m,\n      isError: h,\n      error: l\n    };\n  },\n  He = e => {\n    const t = v(),\n      r = P(() => z(t.auth.client), [t]),\n      i = S(r),\n      d = n(i, s => s.matches({\n        idle: \"error\"\n      })),\n      l = n(i, s => s.matches({\n        idle: \"success\"\n      })),\n      h = n(i, s => s.context.error),\n      m = n(i, s => s.matches(\"requesting\"));\n    return {\n      sendEmail: (s, o = e) => B(i, s, o),\n      isLoading: m,\n      isSent: l,\n      isError: d,\n      error: h\n    };\n  },\n  Qe = () => {\n    const e = p(),\n      t = () => X(e),\n      r = n(e, a => a.context.errors.authentication || null, (a, s) => (a == null ? void 0 : a.error) === (s == null ? void 0 : s.error)),\n      i = n(e, a => a.matches({\n        authentication: {\n          authenticating: \"anonymous\"\n        }\n      })),\n      d = n(e, a => a.matches({\n        authentication: \"signedIn\"\n      })),\n      l = n(e, a => a.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      })),\n      h = n(e, a => a.context.user, (a, s) => (a == null ? void 0 : a.id) === (s == null ? void 0 : s.id));\n    return {\n      accessToken: n(e, a => a.context.accessToken.value),\n      error: r,\n      isError: l,\n      isLoading: i,\n      isSuccess: d,\n      signInAnonymous: t,\n      user: h\n    };\n  },\n  $e = () => {\n    const e = p(),\n      t = (u, g) => Z(e, u, g),\n      r = u => b(e, u),\n      i = n(e, u => u.context.user, (u, g) => (u == null ? void 0 : u.id) === (g == null ? void 0 : g.id)),\n      d = n(e, u => u.context.accessToken.value),\n      l = n(e, u => u.context.refreshToken.value),\n      h = n(e, u => u.context.errors.authentication || null, (u, g) => (u == null ? void 0 : u.error) === (g == null ? void 0 : g.error)),\n      m = n(e, u => u.matches({\n        authentication: \"signedIn\"\n      })),\n      a = n(e, u => u.matches({\n        authentication: {\n          authenticating: \"password\"\n        }\n      }), (u, g) => u === g),\n      s = n(e, u => u.matches({\n        authentication: {\n          signedOut: \"noErrors\"\n        },\n        registration: {\n          incomplete: \"needsEmailVerification\"\n        }\n      }), (u, g) => u === g),\n      o = n(e, u => u.context.mfa !== null),\n      c = n(e, u => u.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }), (u, g) => u === g),\n      E = n(e, u => u.context.mfa);\n    return {\n      accessToken: d,\n      refreshToken: l,\n      error: h,\n      isError: c,\n      isLoading: a,\n      isSuccess: m,\n      needsEmailVerification: s,\n      needsMfaOtp: o,\n      mfa: E,\n      sendMfaOtp: r,\n      signInEmailPassword: t,\n      user: i\n    };\n  };\nfunction je(e) {\n  const t = p(),\n    r = (m, a = e) => ee(t, m, a),\n    i = n(t, m => m.context.errors.registration || null, (m, a) => (m == null ? void 0 : m.error) === (a == null ? void 0 : a.error)),\n    d = n(t, m => m.matches(\"registration.passwordlessEmail\")),\n    l = n(t, m => m.matches(\"registration.incomplete.needsEmailVerification\")),\n    h = n(t, m => m.matches(\"registration.incomplete.failed\"));\n  return {\n    signInEmailPasswordless: r,\n    isLoading: d,\n    isSuccess: l,\n    isError: h,\n    error: i\n  };\n}\nconst Ge = () => {\n    const e = p(),\n      t = o => te(e, o),\n      r = n(e, o => o.context.user, (o, c) => (o == null ? void 0 : o.id) === (c == null ? void 0 : c.id)),\n      i = n(e, o => o.context.accessToken.value),\n      d = n(e, o => o.context.refreshToken.value),\n      l = n(e, o => o.context.errors.authentication || null, (o, c) => (o == null ? void 0 : o.error) === (c == null ? void 0 : c.error)),\n      h = n(e, o => o.matches({\n        authentication: \"signedIn\"\n      })),\n      m = n(e, o => o.matches({\n        authentication: {\n          authenticating: \"securityKeyEmail\"\n        }\n      }), (o, c) => o === c),\n      a = n(e, o => o.matches({\n        authentication: {\n          signedOut: \"noErrors\"\n        },\n        registration: {\n          incomplete: \"needsEmailVerification\"\n        }\n      }), (o, c) => o === c),\n      s = n(e, o => o.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }), (o, c) => o === c);\n    return {\n      accessToken: i,\n      refreshToken: d,\n      error: l,\n      isError: s,\n      isLoading: m,\n      isSuccess: h,\n      needsEmailVerification: a,\n      signInEmailSecurityKey: t,\n      user: r\n    };\n  },\n  Te = () => {\n    const e = p();\n    return n(e, t => t.context.user, (t, r) => (t && JSON.stringify(t)) === (r && JSON.stringify(r)));\n  },\n  Je = () => {\n    const e = Te(),\n      t = v(),\n      r = L(),\n      i = e ? (r == null ? void 0 : r[\"x-hasura-auth-elevated\"]) === (e == null ? void 0 : e.id) : !1,\n      [d, l] = x(!!i),\n      h = m => se(t.auth.client, m);\n    return T(() => {\n      l(!!i);\n    }, [i]), {\n      elevated: d,\n      elevateEmailSecurityKey: h\n    };\n  },\n  Ye = () => {\n    const e = p(),\n      t = s => ne(e, s),\n      r = n(e, s => s.context.user, (s, o) => (s == null ? void 0 : s.id) === (o == null ? void 0 : o.id)),\n      i = n(e, s => s.context.accessToken.value),\n      d = n(e, s => s.context.refreshToken.value),\n      l = n(e, s => s.context.errors.authentication || null, (s, o) => (s == null ? void 0 : s.error) === (o == null ? void 0 : o.error)),\n      h = n(e, s => s.matches({\n        authentication: \"signedIn\"\n      })),\n      m = n(e, s => s.matches({\n        authentication: {\n          authenticating: \"password\"\n        }\n      }), (s, o) => s === o),\n      a = n(e, s => s.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }), (s, o) => s === o);\n    return {\n      accessToken: i,\n      refreshToken: d,\n      error: l,\n      isError: a,\n      isLoading: m,\n      isSuccess: h,\n      signInPAT: t,\n      user: r\n    };\n  };\nfunction We(e) {\n  const t = p(),\n    [r, i] = x(\"\"),\n    d = (c, E = e) => (i(c), oe(t, c, E)),\n    l = async (...c) => {\n      if (c.length === 2) {\n        const [u, g] = c;\n        return k(t, u, g);\n      }\n      const [E] = c;\n      return k(t, r, E);\n    },\n    h = n(t, c => c.context.errors.registration || null, (c, E) => (c == null ? void 0 : c.error) === (E == null ? void 0 : E.error)),\n    m = n(t, c => c.matches(\"registration.passwordlessSms\") || c.matches(\"registration.passwordlessSmsOtp\")),\n    a = n(t, c => c.matches(\"authentication.signedIn\")),\n    s = n(t, c => c.matches(\"registration.incomplete.needsOtp\")),\n    o = n(t, c => c.matches(\"registration.incomplete.failed\"));\n  return {\n    signInSmsPasswordless: d,\n    sendOtp: l,\n    isLoading: m,\n    isSuccess: a,\n    needsOtp: s,\n    isError: o,\n    error: h\n  };\n}\nconst ze = (e = !1) => {\n    const t = p(),\n      r = l => re(t, typeof l == \"boolean\" ? l : e),\n      i = n(t, l => l.matches({\n        authentication: {\n          signedOut: \"success\"\n        }\n      }), (l, h) => l === h),\n      d = n(t, l => l.context.errors.signout || null, (l, h) => (l == null ? void 0 : l.error) === (h == null ? void 0 : h.error));\n    return {\n      signOut: r,\n      isSuccess: i,\n      error: d\n    };\n  },\n  Be = e => {\n    const t = p(),\n      r = n(t, c => !!c.context.errors.registration),\n      i = n(t, c => c.context.errors.registration || null, (c, E) => (c == null ? void 0 : c.error) === (E == null ? void 0 : E.error)),\n      d = n(t, c => c.matches(\"registration.emailPassword\")),\n      l = n(t, c => c.matches(\"registration.incomplete.needsEmailVerification\")),\n      h = n(t, c => c.matches({\n        authentication: \"signedIn\",\n        registration: \"complete\"\n      })),\n      m = (c, E, u = e, g) => ce(t, c, E, u, g),\n      a = n(t, c => c.context.user, (c, E) => (c == null ? void 0 : c.id) === (E == null ? void 0 : E.id)),\n      s = n(t, c => c.context.accessToken.value),\n      o = n(t, c => c.context.refreshToken.value);\n    return {\n      accessToken: s,\n      refreshToken: o,\n      error: i,\n      isError: r,\n      isLoading: d,\n      isSuccess: h,\n      needsEmailVerification: l,\n      signUpEmailPassword: m,\n      user: a\n    };\n  },\n  Xe = e => {\n    const t = p(),\n      r = n(t, c => !!c.context.errors.registration),\n      i = n(t, c => c.context.errors.registration || null, (c, E) => (c == null ? void 0 : c.error) === (E == null ? void 0 : E.error)),\n      d = n(t, c => c.matches(\"registration.securityKey\")),\n      l = n(t, c => c.matches(\"registration.incomplete.needsEmailVerification\")),\n      h = n(t, c => c.matches({\n        authentication: \"signedIn\",\n        registration: \"complete\"\n      })),\n      m = (c, E = e, u) => ie(t, c, E, u),\n      a = n(t, c => c.context.user, (c, E) => (c == null ? void 0 : c.id) === (E == null ? void 0 : E.id)),\n      s = n(t, c => c.context.accessToken.value),\n      o = n(t, c => c.context.refreshToken.value);\n    return {\n      accessToken: s,\n      refreshToken: o,\n      error: i,\n      isError: r,\n      isLoading: d,\n      isSuccess: h,\n      needsEmailVerification: l,\n      signUpEmailSecurityKey: m,\n      user: a\n    };\n  },\n  Ze = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.avatarUrl;\n    }, (t, r) => t === r);\n  },\n  be = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.defaultRole;\n    }, (t, r) => t === r);\n  },\n  et = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.displayName;\n    }, (t, r) => t === r);\n  },\n  tt = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.email;\n    }, (t, r) => t === r);\n  },\n  st = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.id;\n    }, (t, r) => t === r);\n  },\n  nt = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.isAnonymous;\n    }, (t, r) => t === r);\n  },\n  ot = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return (r = t.context.user) == null ? void 0 : r.locale;\n    }, (t, r) => t === r);\n  },\n  rt = () => {\n    const e = p();\n    return n(e, t => {\n      var r;\n      return t.matches(\"authentication.signedIn\") ? ((r = t.context.user) == null ? void 0 : r.roles) || [] : [];\n    });\n  };\nfunction ct(e) {\n  const t = p(),\n    r = (s, o = e) => ae(t, s, o),\n    i = async (s, o) => ue(t, s, o),\n    d = n(t, s => s.context.errors.registration || null, (s, o) => (s == null ? void 0 : s.error) === (o == null ? void 0 : o.error)),\n    l = n(t, s => s.matches(\"registration.signInEmailOTP\") || s.matches(\"registration.verifyEmailOTP\")),\n    h = n(t, s => s.matches(\"authentication.signedIn\")),\n    m = n(t, s => s.matches(\"registration.incomplete.needsOtp\")),\n    a = n(t, s => s.matches(\"registration.incomplete.failed\"));\n  return {\n    signInEmailOTP: r,\n    verifyEmailOTP: i,\n    isLoading: l,\n    isSuccess: h,\n    isError: a,\n    error: d,\n    needsOtp: m\n  };\n}\nconst it = () => {\n    const e = p(),\n      t = (s, o, c) => le(e, {\n        provider: s,\n        idToken: o,\n        nonce: c\n      }),\n      r = n(e, s => s.context.user, (s, o) => (s == null ? void 0 : s.id) === (o == null ? void 0 : o.id)),\n      i = n(e, s => s.context.accessToken.value),\n      d = n(e, s => s.context.refreshToken.value),\n      l = n(e, s => s.context.errors.authentication || null, (s, o) => (s == null ? void 0 : s.error) === (o == null ? void 0 : o.error)),\n      h = n(e, s => s.matches({\n        authentication: \"signedIn\"\n      })),\n      m = n(e, s => s.matches({\n        authentication: {\n          authenticating: \"idToken\"\n        }\n      }), (s, o) => s === o),\n      a = n(e, s => s.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }), (s, o) => s === o);\n    return {\n      accessToken: i,\n      refreshToken: d,\n      error: l,\n      isError: a,\n      isLoading: m,\n      isSuccess: h,\n      signInIdToken: t,\n      user: r\n    };\n  },\n  at = () => {\n    const e = v(),\n      [t, r] = x(null),\n      i = !t,\n      d = !!t,\n      [l, h] = x(!1);\n    return {\n      linkIdToken: async ({\n        provider: a,\n        idToken: s,\n        nonce: o\n      }) => {\n        h(!0);\n        const c = await de(e.auth.client, {\n            provider: a,\n            idToken: s,\n            ...(o && {\n              nonce: o\n            })\n          }),\n          {\n            error: E\n          } = c;\n        return E && r(E), h(!1), c;\n      },\n      isLoading: l,\n      isSuccess: i,\n      isError: d,\n      error: t\n    };\n  },\n  ut = () => {\n    const e = p(),\n      t = () => he(e),\n      r = n(e, o => o.context.user, (o, c) => (o == null ? void 0 : o.id) === (c == null ? void 0 : c.id)),\n      i = n(e, o => o.context.accessToken.value),\n      d = n(e, o => o.context.refreshToken.value),\n      l = n(e, o => o.context.errors.authentication || null, (o, c) => (o == null ? void 0 : o.error) === (c == null ? void 0 : c.error)),\n      h = n(e, o => o.matches({\n        authentication: \"signedIn\"\n      })),\n      m = n(e, o => o.matches({\n        authentication: {\n          authenticating: \"securityKeyEmail\"\n        }\n      }), (o, c) => o === c),\n      a = n(e, o => o.matches({\n        authentication: {\n          signedOut: \"noErrors\"\n        },\n        registration: {\n          incomplete: \"needsEmailVerification\"\n        }\n      }), (o, c) => o === c),\n      s = n(e, o => o.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      }), (o, c) => o === c);\n    return {\n      accessToken: i,\n      refreshToken: d,\n      error: l,\n      isError: s,\n      isLoading: m,\n      isSuccess: h,\n      needsEmailVerification: a,\n      signInSecurityKey: t,\n      user: r\n    };\n  };\nexport { ht as NHOST_REFRESH_TOKEN_KEY, we as NhostClient, xe as NhostProvider, I as NhostReactContext, Ae as NhostReactProvider, Ue as SignedIn, Le as SignedOut, ve as VanillaNhostClient, U as useAccessToken, Ce as useAddSecurityKey, p as useAuthInterpreter, Me as useAuthenticated, A as useAuthenticationStatus, Ne as useChangeEmail, Re as useChangePassword, Ke as useConfigMfa, Se as useDecodedAccessToken, Je as useElevateSecurityKeyEmail, Ve as useFileUpload, Pe as useFileUploadItem, De as useHasuraClaim, L as useHasuraClaims, at as useLinkIdToken, Fe as useMultipleFilesUpload, v as useNhostClient, _e as useProviderLink, qe as useResetPassword, He as useSendVerificationEmail, Qe as useSignInAnonymous, ct as useSignInEmailOTP, $e as useSignInEmailPassword, je as useSignInEmailPasswordless, Ge as useSignInEmailSecurityKey, it as useSignInIdToken, Ye as useSignInPAT, ut as useSignInSecurityKey, We as useSignInSmsPasswordless, ze as useSignOut, Be as useSignUpEmailPassword, Xe as useSignUpEmailSecurityKeyEmail, Ze as useUserAvatarUrl, Te as useUserData, be as useUserDefaultRole, et as useUserDisplayName, tt as useUserEmail, st as useUserId, nt as useUserIsAnonymous, ot as useUserLocale, rt as useUserRoles };","map":{"version":3,"names":["ve","C","we","constructor","t","start","I","ge","xe","NhostProvider","nhost","e","initial","r","i","S","auth","client","machine","devTools","interpreter","initialSession","d","Ee","T","current","send","data","session","me","createElement","Provider","value","children","Ae","p","useAuthInterpreter","y","Error","A","useAuthenticationStatus","n","isAuthenticated","matches","authentication","isLoading","hasTag","error","context","errors","isError","signedOut","connectionAttempts","importTokenAttempts","Ue","O","w","Le","U","useAccessToken","accessToken","v","useNhostClient","Ce","useAddSecurityKey","x","l","h","add","a","s","M","o","isSuccess","Me","useAuthenticated","status","getSnapshot","subscribe","unsubscribe","Ne","P","N","m","changeEmail","fe","R","needsEmailVerification","Re","useChangePassword","K","idle","changePassword","V","Ke","useConfigMfa","D","f","generated","imageUrl","c","secret","generateQrCode","F","isGenerating","qrCodeDataUrl","isGenerated","activateMfa","_","isActivating","isActivated","isDisabling","disableMfa","q","totpSecret","Se","useDecodedAccessToken","pe","Pe","g","type","file","bucketId","E","Q","url","storage","getAccessToken","adminSecret","cancel","destroy","progress","id","u","name","upload","isUploaded","isUploading","Ve","useFileUpload","H","L","useHasuraClaims","De","startsWith","Fe","useMultipleFilesUpload","$","event","files","filter","length","j","clear","_e","Proxy","get","backendUrl","connect","G","J","clientUrl","qe","Y","resetPassword","W","isSent","He","z","sendEmail","B","Qe","useSignInAnonymous","signInAnonymous","X","authenticating","user","$e","useSignInEmailPassword","signInEmailPassword","Z","b","refreshToken","registration","incomplete","mfa","needsMfaOtp","sendMfaOtp","je","signInEmailPasswordless","ee","Ge","useSignInEmailSecurityKey","te","signInEmailSecurityKey","Te","useUserData","JSON","stringify","Je","useElevateSecurityKeyEmail","se","elevated","elevateEmailSecurityKey","Ye","useSignInPAT","ne","signInPAT","We","signInSmsPasswordless","oe","sendOtp","k","needsOtp","ze","useSignOut","re","signout","signOut","Be","signUpEmailPassword","ce","Xe","signUpEmailSecurityKey","ie","Ze","useUserAvatarUrl","avatarUrl","be","useUserDefaultRole","defaultRole","et","useUserDisplayName","displayName","tt","useUserEmail","email","st","useUserId","nt","useUserIsAnonymous","isAnonymous","ot","useUserLocale","locale","rt","useUserRoles","roles","ct","signInEmailOTP","ae","verifyEmailOTP","ue","it","useSignInIdToken","signInIdToken","le","provider","idToken","nonce","at","useLinkIdToken","linkIdToken","de","ut","useSignInSecurityKey","signInSecurityKey","he"],"sources":["D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\client.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\provider.tsx","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useAuthInterpreter.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useAuthenticationStatus.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\components\\SignedIn.tsx","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\components\\SignedOut.tsx","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useAccessToken.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useNhostClient.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useAddSecurityKey.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useAuthenticated.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useChangeEmail.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useChangePassword.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useConfigMfa.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useDecodedAccessToken.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useFileUpload.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useHasuraClaims.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useHasuraClaim.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useMultipleFilesUpload.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useProviderLink.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useResetPassword.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSendVerificationEmail.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInAnonymous.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInEmailPassword.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInEmailPasswordless.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInEmailSecurityKey.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserData.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useElevateSecurityKeyEmail.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInPAT.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInSmsPasswordless.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignOut.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignUpEmailPassword.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignUpEmailSecurityKey.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserAvatarUrl.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserDefaultRole.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserDisplayName.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserEmail.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserId.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserIsAnonymous.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserLocale.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useUserRoles.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInEmailOTP.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInIdToken.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useLinkIdToken.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\react\\src\\useSignInSecurityKey.ts"],"sourcesContent":["import {\n  NhostClient as _VanillaNhostClient,\n  NhostClientConstructorParams as VanillaNhostClientConstructorParams\n} from '@nhost/nhost-js'\n\n/** @internal */\nexport const VanillaNhostClient = _VanillaNhostClient\n\nexport interface NhostReactClientConstructorParams\n  extends Omit<VanillaNhostClientConstructorParams, 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaNhostClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n\n// * Required for @nhost/nextjs\nexport { NHOST_REFRESH_TOKEN_KEY } from '@nhost/nhost-js'\nexport type { AuthMachine, NhostAuthConstructorParams } from '@nhost/nhost-js'\n","import { NhostSession } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\nimport { NhostClient } from './client'\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostProvider: React.FC<PropsWithChildren<NhostProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const interpreter = useInterpret(nhost.auth.client.machine, { devTools: nhost.devTools })\n\n  nhost.auth.client.start({ interpreter, initialSession: initial, devTools: nhost.devTools })\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n\n/**\n * @deprecated use `NhostProvider` instead\n */\nexport const NhostReactProvider = NhostProvider\n","import { AuthMachine } from '@nhost/nhost-js'\nimport { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter)\n    throw Error('Could not find the Nhost auth client. Did you wrap your app in <NhostProvider />?')\n  return interpreter\n}\n","import { ErrorPayload } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = (): {\n  isAuthenticated: boolean\n  isLoading: boolean\n  error: ErrorPayload | null\n  isError: boolean\n  connectionAttempts: number\n} => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } }),\n      connectionAttempts: state.context.importTokenAttempts\n    }),\n    (a, b) =>\n      a.isAuthenticated === b.isAuthenticated &&\n      a.isLoading === b.isLoading &&\n      a.connectionAttempts === b.connectionAttempts\n  )\n}\n","import { Fragment, PropsWithChildren, createElement } from 'react'\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedIn />` to control the rendering of components for users. Components inside `<SignedIn />` are only rendered if the user is authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedIn } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedIn>\n *         <h1>Only rendered if the user is authenticated</h1>\n *       </SignedIn>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-in\n * @category Components\n */\n\nexport function SignedIn({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (!isAuthenticated) {\n    return null\n  }\n\n  return createElement(Fragment, null, children)\n}\n","import { Fragment, PropsWithChildren, createElement } from 'react'\nimport { useAuthenticationStatus } from '../useAuthenticationStatus'\n\n/**\n * Use `<SignedOut />` to control the rendering of components for users. Components inside `<SignedOut />` are only rendered if the user is not authenticated.\n *\n * @example\n * ```tsx\n * import { NhostProvider, SignedOut } from \"@nhost/react\";\n * import { nhost } from '@/utils/nhost';\n *\n * function Page() {\n *   return (\n *     <NhostProvider nhost={nhost}>\n *       <SignedOut>\n *         <h1>Only rendered if the user is not authenticated</h1>\n *       </SignedOut>\n *     </NhostProvider>\n *   )\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/signed-out\n * @category Components\n */\n\nexport function SignedOut({ children }: PropsWithChildren<unknown>) {\n  const { isAuthenticated } = useAuthenticationStatus()\n\n  if (isAuthenticated) {\n    return null\n  }\n\n  return createElement(Fragment, null, children)\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = (): string | null => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/nhost-js'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = (): boolean => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.getSnapshot().matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useCallback, useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail('new@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions) {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail, valueOptions = options) =>\n      changeEmailPromise(service, valueEmail, valueOptions),\n    [service, options]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionLoadingState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = () => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword) =>\n    changePasswordPromise(service, valuePassword)\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  DisableMfaHandlerResult,\n  disableMfaPromise,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n  disableMfa: (code: string) => Promise<DisableMfaHandlerResult>\n  isDisabling: boolean\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const isDisabling = useSelector(service, (state) => state.matches('disabling'))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n  const totpSecret = useSelector(service, (state) => state.context.secret || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n  const disableMfa = (code: string) => disableMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isDisabling,\n    isError,\n    error,\n    disableMfa,\n    totpSecret\n  }\n}\n","import { JWTClaims } from '@nhost/nhost-js'\nimport { jwtDecode } from 'jwt-decode'\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = (): JWTClaims | null => {\n  const jwt = useAccessToken()\n  return jwt ? jwtDecode<JWTClaims>(jwt) : null\n}\n","import {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { InterpreterFrom } from 'xstate'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      ref\n    )\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","import { JWTHasuraClaims } from '@nhost/nhost-js'\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = (): JWTHasuraClaims | null => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string): string | string[] | null => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useMultipleFilesUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(\n      {\n        url: nhost.storage.url,\n        accessToken: nhost.auth.getAccessToken(),\n        adminSecret: nhost.adminSecret,\n        ...params\n      },\n      service\n    )\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import {\n  encodeQueryParameters,\n  Provider,\n  ProviderOptions,\n  rewriteRedirectTo\n} from '@nhost/nhost-js'\nimport { useContext, useEffect, useState } from 'react'\nimport { NhostReactContext } from './provider'\nimport { useAccessToken } from './useAccessToken'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n *\n *  Pass in the `connect` option to connect the user's account to the OAuth provider when different emails are used.\n *\n * ```js\n * const providerLink = useProviderLink({ connect: true });\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions): Record<Provider, string> => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n  const accessToken = useAccessToken()\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      let providerLink = `${nhost.auth.client.backendUrl}/signin/provider/${provider}`\n\n      const connectOptions = options?.connect ? { connect: accessToken } : {}\n\n      return encodeQueryParameters(\n        providerLink,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, {\n          ...options,\n          ...connectOptions\n        } as any)\n      )\n    }\n  })\n}\n","import {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (options) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (valueEmail, valueOptions = options) =>\n    resetPasswordPromise(service, valueEmail, valueOptions)\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/nhost-js'\nimport { useInterpret, useSelector } from '@xstate/react'\nimport { useMemo } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (options) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (valueEmail, valueOptions = options) =>\n    sendVerificationEmailPromise(service, valueEmail, valueOptions)\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  SignInMfaTotpHandlerResult,\n  signInMfaTotpPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\nexport interface SendMfaOtpHandler {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHandler\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (email, password) =>\n    signInEmailPasswordPromise(service, email, password)\n\n  const sendMfaOtp: SendMfaOtpHandler = (otp) => signInMfaTotpPromise(service, otp)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n\n  const needsMfaOtp = useSelector(service, (state) => state.context.mfa !== null)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionLoadingState,\n  ActionSuccessState,\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  signInEmailPasswordlessPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult\n  extends ActionLoadingState,\n    ActionSuccessState,\n    ActionErrorState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult {\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail,\n    valueOptions = options\n  ) => signInEmailPasswordlessPromise(service, valueEmail, valueOptions)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { User } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = (): User | null => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import {\n  elevateEmailSecurityKeyPromise,\n  ElevateWithSecurityKeyHandlerResult\n} from '@nhost/nhost-js'\nimport { useEffect, useState } from 'react'\nimport { useHasuraClaims } from './useHasuraClaims'\nimport { useNhostClient } from './useNhostClient'\nimport { useUserData } from './useUserData'\n\ninterface ElevateWithSecurityKeyHandler {\n  (email: string): Promise<ElevateWithSecurityKeyHandlerResult>\n}\n\ninterface ElevateWithSecurityKeyHook {\n  elevateEmailSecurityKey: ElevateWithSecurityKeyHandler\n  elevated: boolean\n}\n\n/**\n * Use the hook `useElevateSecurityKeyEmail` to elevate the user auth permission in order to perform sensitive operations\n *\n * @example\n * ```tsx\n * const { elevateEmailSecurityKey, elevated } = useElevateSecurityKeyEmail()\n *\n * console.log({ elevated });\n *\n * await elevateEmailSecurityKey('joe@example.com')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/elevate-web-authn\n */\nexport const useElevateSecurityKeyEmail = (): ElevateWithSecurityKeyHook => {\n  const user = useUserData()\n  const nhost = useNhostClient()\n  const claims = useHasuraClaims()\n\n  const hasElevatedClaim = user ? claims?.['x-hasura-auth-elevated'] === user?.id : false\n\n  const [elevated, setElevated] = useState(!!hasElevatedClaim)\n\n  const elevateEmailSecurityKey: ElevateWithSecurityKeyHandler = (email: string) =>\n    elevateEmailSecurityKeyPromise(nhost.auth.client, email)\n\n  useEffect(() => {\n    setElevated(!!hasElevatedClaim)\n  }, [hasElevatedClaim])\n\n  return {\n    elevated,\n    elevateEmailSecurityKey\n  }\n}\n","import { SignInPATHandlerResult, SignInPATState, signInPATPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInPATHandler {\n  (pat: string): Promise<SignInPATHandlerResult>\n}\n\nexport interface SignInPATHookResult extends SignInPATState {\n  signInPAT: SignInPATHandler\n}\n\ninterface SignInPATHook {\n  (): SignInPATHookResult\n}\n\n/**\n * Use the hook `useSignInPAT` to sign in a user using a personal access token.\n *\n * @example\n * ```tsx\n * const { signInPAT, isLoading, isSuccess, isError, error } = useSignInPAT()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInPAT('8c5402d1-b05d-4825-a3ae-52d26402b89b')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-pat\n */\nexport const useSignInPAT: SignInPATHook = () => {\n  const service = useAuthInterpreter()\n  const signInPAT: SignInPATHandler = (pat: string) => signInPATPromise(service, pat)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches({ authentication: 'signedIn' }))\n\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInPAT,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  signInSmsPasswordlessOtpPromise,\n  signInSmsPasswordlessPromise,\n  SignInSmsPasswordlessState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useState } from 'react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import {\n  signUpEmailPasswordPromise,\n  SignUpEmailPasswordState,\n  SignUpOptions,\n  RequestOptions\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions,\n    requestOptions?: RequestOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (options) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    email,\n    password,\n    valueOptions = options,\n    requestOptions\n  ) => signUpEmailPasswordPromise(service, email, password, valueOptions, requestOptions)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  RequestOptions,\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (\n    email: string,\n    options?: SignUpSecurityKeyOptions,\n    requestOptions?: RequestOptions\n  ): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKeyEmail` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKeyEmail()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (\n    email,\n    options = hookOptions,\n    requestOptions?: RequestOptions\n  ) => signUpEmailSecurityKeyPromise(service, email, options, requestOptions)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = (): boolean | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = (): string | undefined => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = (): string[] => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => {\n    if (!state.matches('authentication.signedIn')) {\n      return []\n    }\n    return state.context.user?.roles || []\n  })\n}\n","import {\n  EmailOTPOptions,\n  SignInEmailOTPHandlerResult,\n  signInEmailOTPPromise,\n  SignInEmailOTPState,\n  VerifyEmailOTPHandlerResult,\n  verifyEmailOTPPromise\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInEmailOTPHandler {\n  (email: string, options?: EmailOTPOptions): Promise<SignInEmailOTPHandlerResult>\n}\n\nexport interface VerifyEmailOTPHandler {\n  (email: string, otp: string): Promise<VerifyEmailOTPHandlerResult>\n}\n\nexport interface SignInEmailOTPHookResult extends SignInEmailOTPState {\n  signInEmailOTP: SignInEmailOTPHandler\n  verifyEmailOTP: VerifyEmailOTPHandler\n}\n\n/**\n * Use the hook `useSignInEmailOTP` to sign in a user with a one-time password sent via email.\n *\n * ## Usage\n *\n * 1. Call the `signInEmailOTP` function with the user's email to send a one-time password (OTP) to that email address.\n * 2. The state `needsOtp` will be `true`, indicating that an OTP is required.\n * 3. Once the user receives the OTP via email, call the `verifyEmailOTP` function with the email and the received OTP.\n * 4. On successful verification, the user is authenticated, and `isSuccess` becomes `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInEmailOTP` and `verifyEmailOTP` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInEmailOTP, verifyEmailOTP, isLoading, isSuccess, isError, error } = useSignInEmailOTP()\n *\n * const signIn = async (e) => {\n *   e.preventDefault();\n *   await signInEmailOTP('john@gmail.com');\n * }\n *\n * const verify = async (e) => {\n *   e.preventDefault();\n *   await verifyEmailOTP('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-otp\n */\nexport function useSignInEmailOTP(options?: EmailOTPOptions): SignInEmailOTPHookResult {\n  const service = useAuthInterpreter()\n\n  const signInEmailOTP: SignInEmailOTPHandler = (email: string, overrideOptions = options) =>\n    signInEmailOTPPromise(service, email, overrideOptions)\n\n  const verifyEmailOTP: VerifyEmailOTPHandler = async (email: string, otp: string) =>\n    verifyEmailOTPPromise(service, email, otp)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.signInEmailOTP') || state.matches('registration.verifyEmailOTP')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailOTP, verifyEmailOTP, isLoading, isSuccess, isError, error, needsOtp }\n}\n","import {\n  SignInIdTokenHandlerResult,\n  SignInIdTokenState,\n  signInIdTokenPromise,\n  Provider\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInIdTokenHandler {\n  (provider: Provider, idToken: string, nonce?: string): Promise<SignInIdTokenHandlerResult>\n}\n\nexport interface SignInIdTokenHookResult extends SignInIdTokenState {\n  signInIdToken: SignInIdTokenHandler\n}\n\ninterface SignInIdTokenHook {\n  (): SignInIdTokenHookResult\n}\n\n/**\n * Use the hook `useSignInIdToken` to sign in a user using an `idToken`.\n *\n * @example\n * ```tsx\n * const { signInIdToken, isLoading, isSuccess, isError, error } = useSignInIdToken()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInIdToken({ provider: 'google', idToken: '...' })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-idtoken\n */\nexport const useSignInIdToken: SignInIdTokenHook = () => {\n  const service = useAuthInterpreter()\n  const signInIdToken: SignInIdTokenHandler = (\n    provider: Provider,\n    idToken: string,\n    nonce?: string\n  ) =>\n    signInIdTokenPromise(service, {\n      provider,\n      idToken,\n      nonce\n    })\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches({ authentication: 'signedIn' }))\n\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'idToken' } }),\n    (a, b) => a === b\n  )\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInIdToken,\n    user\n  }\n}\n","import {\n  ActionErrorState,\n  ActionSuccessState,\n  ErrorPayload,\n  LinkIdTokenHandlerParams,\n  LinkIdTokenHandlerResult,\n  linkIdTokenPromise\n} from '@nhost/nhost-js'\nimport { useState } from 'react'\nimport { useNhostClient } from './useNhostClient'\n\ninterface LinkIdTokenHandler {\n  (params: LinkIdTokenHandlerParams): Promise<LinkIdTokenHandlerResult>\n}\n\nexport interface LinkIdTokenHookResult extends ActionErrorState, ActionSuccessState {\n  linkIdToken: LinkIdTokenHandler\n}\n\ninterface LinkIdTokenHook {\n  (): LinkIdTokenHookResult\n}\n\n/**\n * Use the hook `useLinkIdToken` to link a user account with the provider's account using an id token\n *\n * @example\n * ```tsx\n * const { linkIdToken, isLoading, isSuccess, isError, error } = useLinkIdToken()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await linkIdToken({\n *      provider: 'google',\n *      idToken: '...',\n *      nonce: '...'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-link-id-token\n */\nexport const useLinkIdToken: LinkIdTokenHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n  const [isLoading, setIsLoading] = useState(false)\n\n  const linkIdToken: LinkIdTokenHandler = async ({\n    provider,\n    idToken,\n    nonce\n  }: LinkIdTokenHandlerParams) => {\n    setIsLoading(true)\n\n    const result = await linkIdTokenPromise(nhost.auth.client, {\n      provider,\n      idToken,\n      ...(nonce && { nonce })\n    })\n\n    const { error } = result\n\n    if (error) {\n      setError(error)\n    }\n\n    setIsLoading(false)\n\n    return result\n  }\n\n  return { linkIdToken, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInSecurityKeyPromise,\n  SignInSecurityKeyHandlerResult,\n  SignInSecurityKeyState\n} from '@nhost/nhost-js'\nimport { useSelector } from '@xstate/react'\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyHandler {\n  (): Promise<SignInSecurityKeyHandlerResult>\n}\n\nexport interface SignInSecurityKeyHookResult extends SignInSecurityKeyState {\n  signInSecurityKey: SignInSecurityKeyHandler\n}\n\ninterface SignInSecurityKeyHook {\n  (): SignInSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignInSecurityKey` to sign in a user with a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInSecurityKey()\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-security-key\n */\nexport const useSignInSecurityKey: SignInSecurityKeyHook = () => {\n  const service = useAuthInterpreter()\n\n  const signInSecurityKey: SignInSecurityKeyHandler = () => signInSecurityKeyPromise(service)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  const refreshToken = useSelector(service, (state) => state.context.refreshToken.value)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    refreshToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInSecurityKey,\n    user\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}