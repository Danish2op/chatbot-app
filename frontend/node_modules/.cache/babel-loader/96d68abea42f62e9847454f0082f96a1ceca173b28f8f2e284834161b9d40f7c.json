{"ast":null,"code":"var _jsxFileName = \"D:\\\\chatb\\\\chatbot-app\\\\frontend\\\\src\\\\components\\\\ChatMessages.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Function to clean message content from escape sequences\nconst cleanMessageContent = content => {\n  if (!content || typeof content !== 'string') return content;\n  return content.replace(/\\\\b/g, '') // Remove \\b markers\n  .replace(/\\\\\\\\b/g, '') // Remove escaped \\b\n  .replace(/\\\\\\\\n/g, '\\n') // Convert \\\\n to actual newlines\n  .replace(/\\\\n/g, '\\n') // Convert \\n to actual newlines\n  .replace(/\\\\r/g, '') // Remove carriage returns\n  .replace(/  +/g, ' ') // Remove multiple spaces\n  .trim();\n};\nconst ChatMessages = ({\n  messages,\n  loading\n}) => {\n  _s();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"Loading messages...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-messages\",\n    children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-messages\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Start a conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Send a message to begin chatting with the AI assistant.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : messages.map(message => {\n      const cleanedContent = cleanMessageContent(message.content);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role === 'user' ? 'user-message' : 'assistant-message'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-avatar\",\n          children: message.role === 'user' ? 'ðŸ‘¤' : 'ðŸ¤–'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-text\",\n            children: cleanedContent.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [line, index < cleanedContent.split('\\n').length - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 73\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: new Date(message.created_at).toLocaleTimeString('en-US', {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatMessages, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c = ChatMessages;\nexport default ChatMessages;\nvar _c;\n$RefreshReg$(_c, \"ChatMessages\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","cleanMessageContent","content","replace","trim","ChatMessages","messages","loading","_s","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","cleanedContent","role","split","line","index","Fragment","Date","created_at","toLocaleTimeString","hour","minute","id","ref","_c","$RefreshReg$"],"sources":["D:/chatb/chatbot-app/frontend/src/components/ChatMessages.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Message } from '../types';\n\ninterface ChatMessagesProps {\n  messages: Message[];\n  loading: boolean;\n}\n\n// Function to clean message content from escape sequences\nconst cleanMessageContent = (content: string): string => {\n  if (!content || typeof content !== 'string') return content;\n  \n  return content\n    .replace(/\\\\b/g, '')           // Remove \\b markers\n    .replace(/\\\\\\\\b/g, '')         // Remove escaped \\b\n    .replace(/\\\\\\\\n/g, '\\n')       // Convert \\\\n to actual newlines\n    .replace(/\\\\n/g, '\\n')         // Convert \\n to actual newlines\n    .replace(/\\\\r/g, '')           // Remove carriage returns\n    .replace(/  +/g, ' ')          // Remove multiple spaces\n    .trim();\n};\n\nconst ChatMessages: React.FC<ChatMessagesProps> = ({ messages, loading }) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  if (loading) {\n    return (\n      <div className=\"messages-loading\">\n        <div className=\"loading-spinner\">Loading messages...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"chat-messages\">\n      {messages.length === 0 ? (\n        <div className=\"empty-messages\">\n          <div className=\"welcome-message\">\n            <h3>Start a conversation</h3>\n            <p>Send a message to begin chatting with the AI assistant.</p>\n          </div>\n        </div>\n      ) : (\n        messages.map((message) => {\n          const cleanedContent = cleanMessageContent(message.content);\n          return (\n            <div\n              key={message.id}\n              className={`message ${message.role === 'user' ? 'user-message' : 'assistant-message'}`}\n            >\n              <div className=\"message-avatar\">\n                {message.role === 'user' ? 'ðŸ‘¤' : 'ðŸ¤–'}\n              </div>\n              <div className=\"message-content\">\n                <div className=\"message-text\">\n                  {cleanedContent.split('\\n').map((line, index) => (\n                    <React.Fragment key={index}>\n                      {line}\n                      {index < cleanedContent.split('\\n').length - 1 && <br />}\n                    </React.Fragment>\n                  ))}\n                </div>\n                <div className=\"message-time\">\n                  {new Date(message.created_at).toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                  })}\n                </div>\n              </div>\n            </div>\n          );\n        })\n      )}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default ChatMessages;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}