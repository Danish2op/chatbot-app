{"ast":null,"code":"var p = Object.defineProperty;\nvar T = (e, t, s) => t in e ? p(e, t, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: s\n}) : e[t] = s;\nvar a = (e, t, s) => T(e, typeof t != \"symbol\" ? t + \"\" : t, s);\nimport { HasuraAuthClient as m } from \"@nhost/hasura-auth-js\";\nexport * from \"@nhost/hasura-auth-js\";\nimport { HasuraStorageClient as w } from \"@nhost/hasura-storage-js\";\nexport * from \"@nhost/hasura-storage-js\";\nimport k from \"isomorphic-unfetch\";\nimport { NhostGraphqlClient as b } from \"@nhost/graphql-js\";\nconst A = /^((?<protocol>http[s]?):\\/\\/)?(?<host>(localhost|local))(:(?<port>(\\d+|__\\w+__)))?$/;\nfunction f(e, t) {\n  const {\n    subdomain: s,\n    region: o\n  } = e;\n  if (!s) throw new Error(\"A `subdomain` must be set.\");\n  const c = s.match(A);\n  if (c != null && c.groups) {\n    const {\n        protocol: l,\n        host: i,\n        port: h\n      } = c.groups,\n      r = x(t);\n    return r || (i === \"localhost\" ? (console.warn('The `subdomain` is set to \"localhost\". Support for this will be removed in a future release. Please use \"local\" instead.'), `${l || \"http\"}://localhost:${h || 1337}/v1/${t}`) : h ? `${l || \"https\"}://local.${t}.local.nhost.run:${h}/v1` : `${l || \"https\"}://local.${t}.local.nhost.run/v1`);\n  }\n  if (!o) throw new Error('`region` must be set when using a `subdomain` other than \"local\".');\n  return `https://${s}.${t}.${o}.nhost.run/v1`;\n}\nfunction S() {\n  return typeof window != \"undefined\";\n}\nfunction H() {\n  return typeof process != \"undefined\" && process.env;\n}\nfunction x(e) {\n  return S() || !H() ? null : process.env[`NHOST_${e.toUpperCase()}_URL`];\n}\nfunction U(e, t) {\n  const o = t.startsWith(\"/\") ? t : `/${t}`;\n  return e + o;\n}\nfunction $(e) {\n  const t = \"subdomain\" in e ? f(e, \"auth\") : e.authUrl,\n    {\n      subdomain: s,\n      region: o\n    } = e;\n  if (!t) throw new Error(\"Please provide `subdomain` or `authUrl`.\");\n  return new m({\n    url: t,\n    broadcastKey: `${s}${o != null ? o : \"local\"}`,\n    ...e\n  });\n}\nfunction v(e) {\n  const t = \"subdomain\" in e ? f(e, \"functions\") : e.functionsUrl;\n  if (!t) throw new Error(\"Please provide `subdomain` or `functionsUrl`.\");\n  return new C({\n    url: t,\n    ...e\n  });\n}\nclass C {\n  constructor(t) {\n    a(this, \"url\");\n    a(this, \"accessToken\");\n    a(this, \"adminSecret\");\n    a(this, \"headers\", {});\n    const {\n      url: s,\n      adminSecret: o\n    } = t;\n    this.url = s, this.accessToken = null, this.adminSecret = o;\n  }\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function. Use generic\n   * types to specify the expected response data, request body and error message.\n   *\n   * @example\n   * ### Without generic types\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @example\n   * ### Using generic types\n   * ```ts\n   * type Data = {\n   *   message: string\n   * }\n   *\n   * type Body = {\n   *   email: string\n   *   name: string\n   * }\n   *\n   * type ErrorMessage = {\n   *   details: string\n   * }\n   *\n   * // The function will only accept a body of type `Body`\n   * const { res, error } = await nhost.functions.call<Data, Body, ErrorMessage>(\n   *   'send-welcome-email',\n   *   { email: 'joe@example.com', name: 'Joe Doe' }\n   * )\n   *\n   * // Now the response data is typed as `Data`\n   * console.log(res?.data.message)\n   *\n   * // Now the error message is typed as `ErrorMessage`\n   * console.log(error?.message.details)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call(t, s, o) {\n    var i, h;\n    const c = {\n        \"Content-Type\": \"application/json\",\n        ...this.generateAccessTokenHeaders(),\n        ...(o == null ? void 0 : o.headers),\n        ...this.headers\n        // nhost functions client headers to be sent with all calls\n      },\n      l = U(this.url, t);\n    try {\n      const r = await k(l, {\n        body: s ? JSON.stringify(s) : null,\n        headers: c,\n        method: \"POST\"\n      });\n      if (!r.ok) {\n        let u;\n        return (i = r.headers.get(\"content-type\")) != null && i.includes(\"application/json\") ? u = await r.json() : u = await r.text(), {\n          res: null,\n          error: {\n            message: u,\n            error: r.statusText,\n            status: r.status\n          }\n        };\n      }\n      let n;\n      return (h = r.headers.get(\"content-type\")) != null && h.includes(\"application/json\") ? n = await r.json() : n = await r.text(), {\n        res: {\n          data: n,\n          status: r.status,\n          statusText: r.statusText\n        },\n        error: null\n      };\n    } catch (r) {\n      const n = r;\n      return {\n        res: null,\n        error: {\n          message: n.message,\n          status: n.name === \"AbortError\" ? 0 : 500,\n          error: n.name === \"AbortError\" ? \"abort-error\" : \"unknown\"\n        }\n      };\n    }\n  }\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(t) {\n    if (!t) {\n      this.accessToken = null;\n      return;\n    }\n    this.accessToken = t;\n  }\n  /**\n   * Use `nhost.functions.getHeaders` to get the global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/get-headers\n   */\n  getHeaders() {\n    return this.headers;\n  }\n  /**\n   * Use `nhost.functions.setHeaders` to a set global headers to be sent in all subsequent functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-headers\n   */\n  setHeaders(t) {\n    t && (this.headers = {\n      ...this.headers,\n      ...t\n    });\n  }\n  /**\n   * Use `nhost.functions.unsetHeaders` to a unset global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/unset-headers\n   */\n  unsetHeaders() {\n    const t = this.headers[\"x-hasura-role\"];\n    this.headers = t ? {\n      \"x-hasura-role\": t\n    } : {};\n  }\n  generateAccessTokenHeaders() {\n    return this.adminSecret ? {\n      \"x-hasura-admin-secret\": this.adminSecret\n    } : this.accessToken ? {\n      Authorization: `Bearer ${this.accessToken}`\n    } : {};\n  }\n}\nfunction _(e) {\n  const t = \"subdomain\" in e ? f(e, \"graphql\") : e.graphqlUrl;\n  if (!t) throw new Error(\"Please provide `subdomain` or `graphqlUrl`.\");\n  return new b({\n    url: t,\n    ...e\n  });\n}\nfunction q(e) {\n  const t = \"subdomain\" in e ? f(e, \"storage\") : e.storageUrl;\n  if (!t) throw new Error(\"Please provide `subdomain` or `storageUrl`.\");\n  return new w({\n    url: t,\n    ...e\n  });\n}\nconst F = e => new E(e);\nclass E {\n  /**\n   *\n   * @example\n   * ```ts\n   * // Create a new Nhost client from subdomain and region.\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client from individual service URLs (custom domains, self-hosting, etc).\n   * const nhost = new NhostClient({\n   *   authUrl: \"my-auth-service-url\",\n   *   storageUrl: \"my-storage-service-url\",\n   *   graphqlUrl: \"my-graphql-service-url\",\n   *   functionsUrl: \"my-functions-service-url\",\n   * });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client for local development.\n   * const nhost = new NhostClient({ subdomain: \"local\" });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime: t,\n    clientStorage: s,\n    clientStorageType: o,\n    autoRefreshToken: c,\n    autoSignIn: l,\n    adminSecret: i,\n    devTools: h,\n    start: r = !0,\n    ...n\n  }) {\n    a(this, \"auth\");\n    a(this, \"storage\");\n    a(this, \"functions\");\n    a(this, \"graphql\");\n    a(this, \"_adminSecret\");\n    a(this, \"devTools\");\n    this.auth = $({\n      refreshIntervalTime: t,\n      clientStorage: s,\n      clientStorageType: o,\n      autoRefreshToken: c,\n      autoSignIn: l,\n      start: r,\n      ...n\n    }), this.storage = q({\n      adminSecret: i,\n      ...n\n    }), this.functions = v({\n      adminSecret: i,\n      ...n\n    }), this.graphql = _({\n      adminSecret: i,\n      ...n\n    }), this.auth.onAuthStateChanged((u, d) => {\n      if (u === \"SIGNED_OUT\") {\n        this.storage.setAccessToken(void 0), this.functions.setAccessToken(void 0), this.graphql.setAccessToken(void 0);\n        return;\n      }\n      const g = d == null ? void 0 : d.accessToken;\n      this.storage.setAccessToken(g), this.functions.setAccessToken(g), this.graphql.setAccessToken(g);\n    }), this.auth.onTokenChanged(u => {\n      const d = u == null ? void 0 : u.accessToken;\n      this.storage.setAccessToken(d), this.functions.setAccessToken(d), this.graphql.setAccessToken(d);\n    }), this._adminSecret = i, this.devTools = h;\n  }\n  get adminSecret() {\n    return this._adminSecret;\n  }\n  set adminSecret(t) {\n    this._adminSecret = t, this.storage.setAdminSecret(t);\n  }\n  /**\n   * Use `nhost.setRole` to set the user role for all subsequent GraphQL, storage, and functions calls.\n   * Underneath, this method sets the `x-hasura-role` header on the graphql, storage,\n   * and functions clients.\n   *\n   * ```ts\n   * nhost.graphql.setHeaders({ 'x-hasura-role': role })\n   * nhost.storage.setHeaders({ 'x-hasura-role': role })\n   * nhost.functions.setHeaders({ 'x-hasura-role': role })\n   * ```\n   *\n   * Note: Exercise caution when mixing the use of `setRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.setRole('admin')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/set-role\n   */\n  setRole(t) {\n    this.graphql.setHeaders({\n      \"x-hasura-role\": t\n    }), this.storage.setHeaders({\n      \"x-hasura-role\": t\n    }), this.functions.setHeaders({\n      \"x-hasura-role\": t\n    });\n  }\n  /**\n   * Use `nhost.unsetRole` to unset the user role for all subsequent graphql, storage and functions calls.\n   * Underneath, this method removes the `x-hasura-role` header from the graphql, storage and functions clients.\n   *\n   * Note: Exercise caution when mixing the use of `unsetRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.unsetRole()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/unset-role\n   */\n  unsetRole() {\n    this.graphql.setHeaders((({\n      \"x-hasura-role\": t,\n      ...s\n    }) => s)(this.graphql.getHeaders())), this.storage.setHeaders((({\n      \"x-hasura-role\": t,\n      ...s\n    }) => s)(this.storage.getHeaders())), this.functions.setHeaders((({\n      \"x-hasura-role\": t,\n      ...s\n    }) => s)(this.functions.getHeaders()));\n  }\n}\nexport { E as NhostClient, C as NhostFunctionsClient, $ as createAuthClient, v as createFunctionsClient, _ as createGraphqlClient, F as createNhostClient, q as createStorageClient, f as urlFromSubdomain };","map":{"version":3,"names":["A","f","e","t","subdomain","s","region","o","Error","c","match","groups","protocol","l","host","i","port","h","r","x","console","warn","S","window","H","process","env","toUpperCase","U","startsWith","$","authUrl","m","url","broadcastKey","v","functionsUrl","C","constructor","a","adminSecret","accessToken","call","generateAccessTokenHeaders","headers","k","body","JSON","stringify","method","ok","u","get","includes","json","text","res","error","message","statusText","status","n","data","name","setAccessToken","getHeaders","setHeaders","unsetHeaders","Authorization","_","graphqlUrl","b","q","storageUrl","w","F","E","refreshIntervalTime","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","auth","storage","functions","graphql","onAuthStateChanged","d","g","onTokenChanged","_adminSecret","setAdminSecret","setRole","unsetRole"],"sources":["D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\utils\\helpers.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\clients\\auth.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\clients\\functions\\index.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\clients\\graphql.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\clients\\storage.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\nhost-js\\src\\clients\\nhost.ts"],"sourcesContent":["import { NhostClientConstructorParams } from './types'\n\n// a port can be a number or a placeholder string with leading and trailing double underscores, f.e. \"8080\" or \"__PLACEHOLDER_NAME__\"\nexport const LOCALHOST_REGEX =\n  /^((?<protocol>http[s]?):\\/\\/)?(?<host>(localhost|local))(:(?<port>(\\d+|__\\w+__)))?$/\n\n/**\n * \\`subdomain\\` and `region` should be used when running the Nhost platform\n *\n * @param subdomainAndRegion\n * @param service\n * @returns\n */\nexport function urlFromSubdomain(\n  subdomainAndRegion: Pick<NhostClientConstructorParams, 'region' | 'subdomain'>,\n  service: string\n): string {\n  const { subdomain, region } = subdomainAndRegion\n\n  if (!subdomain) {\n    throw new Error('A `subdomain` must be set.')\n  }\n\n  // check if subdomain is [http[s]://]localhost[:port] or [http[s]://]local[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound?.groups) {\n    const { protocol, host, port } = subdomainLocalhostFound.groups\n\n    const urlFromEnv = getValueFromEnv(service)\n    if (urlFromEnv) {\n      return urlFromEnv\n    }\n\n    if (host === 'localhost') {\n      console.warn(\n        'The `subdomain` is set to \"localhost\". Support for this will be removed in a future release. Please use \"local\" instead.'\n      )\n\n      return `${protocol || 'http'}://localhost:${port || 1337}/v1/${service}`\n    }\n\n    return port\n      ? `${protocol || 'https'}://local.${service}.local.nhost.run:${port}/v1`\n      : `${protocol || 'https'}://local.${service}.local.nhost.run/v1`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"local\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n\n/**\n *\n * @returns whether the code is running in a browser\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n *\n * @returns whether the code is running in a Node.js environment\n */\nfunction environmentIsAvailable() {\n  return typeof process !== 'undefined' && process.env\n}\n\n/**\n *\n * @param service auth | storage | graphql | functions\n * @returns the service's url if the corresponding env var is set\n * NHOST_${service}_URL\n */\nfunction getValueFromEnv(service: string) {\n  if (isBrowser() || !environmentIsAvailable()) {\n    return null\n  }\n\n  return process.env[`NHOST_${service.toUpperCase()}_URL`]\n}\n\n/**\n * Combines a base URL and a path into a single URL string.\n *\n * @param baseUrl - The base URL to use.\n * @param path - The path to append to the base URL.\n * @returns The combined URL string.\n */\nexport function buildUrl(baseUrl: string, path: string) {\n  const hasLeadingSlash = path.startsWith('/')\n  const urlPath = hasLeadingSlash ? path : `/${path}`\n  return baseUrl + urlPath\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Auth from either a subdomain or a URL\n */\nexport function createAuthClient(params: NhostClientConstructorParams) {\n  const authUrl = 'subdomain' in params ? urlFromSubdomain(params, 'auth') : params.authUrl\n\n  const { subdomain, region } = params\n\n  if (!authUrl) {\n    throw new Error('Please provide `subdomain` or `authUrl`.')\n  }\n\n  return new HasuraAuthClient({\n    url: authUrl,\n    broadcastKey: `${subdomain}${region ?? 'local'}`,\n    ...params\n  })\n}\n","import fetch from 'isomorphic-unfetch'\nimport { buildUrl, urlFromSubdomain } from '../../utils/helpers'\nimport { NhostClientConstructorParams } from '../../utils/types'\nimport {\n  NhostFunctionCallConfig,\n  NhostFunctionCallResponse,\n  NhostFunctionsConstructorParams\n} from './types'\n/**\n * Creates a client for Functions from either a subdomain or a URL\n */\nexport function createFunctionsClient(params: NhostClientConstructorParams) {\n  const functionsUrl =\n    'subdomain' in params ? urlFromSubdomain(params, 'functions') : params.functionsUrl\n\n  if (!functionsUrl) {\n    throw new Error('Please provide `subdomain` or `functionsUrl`.')\n  }\n\n  return new NhostFunctionsClient({ url: functionsUrl, ...params })\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  readonly url: string\n  private accessToken: string | null\n  private adminSecret?: string\n  private headers: Record<string, string> = {}\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function. Use generic\n   * types to specify the expected response data, request body and error message.\n   *\n   * @example\n   * ### Without generic types\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @example\n   * ### Using generic types\n   * ```ts\n   * type Data = {\n   *   message: string\n   * }\n   *\n   * type Body = {\n   *   email: string\n   *   name: string\n   * }\n   *\n   * type ErrorMessage = {\n   *   details: string\n   * }\n   *\n   * // The function will only accept a body of type `Body`\n   * const { res, error } = await nhost.functions.call<Data, Body, ErrorMessage>(\n   *   'send-welcome-email',\n   *   { email: 'joe@example.com', name: 'Joe Doe' }\n   * )\n   *\n   * // Now the response data is typed as `Data`\n   * console.log(res?.data.message)\n   *\n   * // Now the error message is typed as `ErrorMessage`\n   * console.log(error?.message.details)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<TData = unknown, TBody = any, TErrorMessage = any>(\n    url: string,\n    body?: TBody | null,\n    config?: NhostFunctionCallConfig\n  ): Promise<NhostFunctionCallResponse<TData, TErrorMessage>> {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers,\n      ...this.headers // nhost functions client headers to be sent with all calls\n    }\n\n    const fullUrl = buildUrl(this.url, url)\n\n    try {\n      const result = await fetch(fullUrl, {\n        body: body ? JSON.stringify(body) : null,\n        headers,\n        method: 'POST'\n      })\n\n      if (!result.ok) {\n        let message: TErrorMessage\n\n        if (result.headers.get('content-type')?.includes('application/json')) {\n          message = await result.json()\n        } else {\n          message = (await result.text()) as unknown as TErrorMessage\n        }\n\n        return {\n          res: null,\n          error: {\n            message,\n            error: result.statusText,\n            status: result.status\n          }\n        }\n      }\n\n      let data: TData\n\n      if (result.headers.get('content-type')?.includes('application/json')) {\n        data = await result.json()\n      } else {\n        data = (await result.text()) as unknown as TData\n      }\n\n      return {\n        res: { data, status: result.status, statusText: result.statusText },\n        error: null\n      }\n    } catch (e) {\n      const error = e as Error\n      return {\n        res: null,\n        error: {\n          message: error.message as unknown as TErrorMessage,\n          status: error.name === 'AbortError' ? 0 : 500,\n          error: error.name === 'AbortError' ? 'abort-error' : 'unknown'\n        }\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  /**\n   * Use `nhost.functions.getHeaders` to get the global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/get-headers\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Use `nhost.functions.setHeaders` to a set global headers to be sent in all subsequent functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-headers\n   */\n  setHeaders(headers?: Record<string, string>) {\n    if (!headers) {\n      return\n    }\n\n    this.headers = {\n      ...this.headers,\n      ...headers\n    }\n  }\n\n  /**\n   * Use `nhost.functions.unsetHeaders` to a unset global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/unset-headers\n   */\n  unsetHeaders() {\n    const userRole = this.headers['x-hasura-role']\n\n    // preserve the user role header to avoid invalidating preceding 'setRole' call.\n    this.headers = userRole ? { 'x-hasura-role': userRole } : {}\n  }\n\n  generateAccessTokenHeaders(): NhostFunctionCallConfig['headers'] {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for GraphQL from either a subdomain or a URL\n */\nexport function createGraphqlClient(params: NhostClientConstructorParams) {\n  const graphqlUrl = 'subdomain' in params ? urlFromSubdomain(params, 'graphql') : params.graphqlUrl\n\n  if (!graphqlUrl) {\n    throw new Error('Please provide `subdomain` or `graphqlUrl`.')\n  }\n\n  return new NhostGraphqlClient({ url: graphqlUrl, ...params })\n}\n","import { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Storage from either a subdomain or a URL\n */\nexport function createStorageClient(params: NhostClientConstructorParams) {\n  const storageUrl = 'subdomain' in params ? urlFromSubdomain(params, 'storage') : params.storageUrl\n\n  if (!storageUrl) {\n    throw new Error('Please provide `subdomain` or `storageUrl`.')\n  }\n\n  return new HasuraStorageClient({ url: storageUrl, ...params })\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\nimport { NhostClientConstructorParams } from '../utils/types'\nimport { createAuthClient } from './auth'\nimport { createFunctionsClient, NhostFunctionsClient } from './functions'\nimport { createGraphqlClient } from './graphql'\nimport { createStorageClient } from './storage'\n\nexport const createNhostClient = (params: NhostClientConstructorParams) => new NhostClient(params)\n\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   *\n   * @example\n   * ```ts\n   * // Create a new Nhost client from subdomain and region.\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client from individual service URLs (custom domains, self-hosting, etc).\n   * const nhost = new NhostClient({\n   *   authUrl: \"my-auth-service-url\",\n   *   storageUrl: \"my-storage-service-url\",\n   *   graphqlUrl: \"my-graphql-service-url\",\n   *   functionsUrl: \"my-functions-service-url\",\n   * });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client for local development.\n   * const nhost = new NhostClient({ subdomain: \"local\" });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    // * Set clients for all services\n    this.auth = createAuthClient({\n      refreshIntervalTime,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start,\n      ...urlParams\n    })\n    this.storage = createStorageClient({ adminSecret, ...urlParams })\n    this.functions = createFunctionsClient({ adminSecret, ...urlParams })\n    this.graphql = createGraphqlClient({ adminSecret, ...urlParams })\n\n    this.auth.onAuthStateChanged((event, session) => {\n      if (event === 'SIGNED_OUT') {\n        this.storage.setAccessToken(undefined)\n        this.functions.setAccessToken(undefined)\n        this.graphql.setAccessToken(undefined)\n\n        return\n      }\n\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    // * Update access token for clients, including when signin in\n    this.auth.onTokenChanged((session) => {\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n\n  /**\n   * Use `nhost.setRole` to set the user role for all subsequent GraphQL, storage, and functions calls.\n   * Underneath, this method sets the `x-hasura-role` header on the graphql, storage,\n   * and functions clients.\n   *\n   * ```ts\n   * nhost.graphql.setHeaders({ 'x-hasura-role': role })\n   * nhost.storage.setHeaders({ 'x-hasura-role': role })\n   * nhost.functions.setHeaders({ 'x-hasura-role': role })\n   * ```\n   *\n   * Note: Exercise caution when mixing the use of `setRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.setRole('admin')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/set-role\n   */\n  setRole(role: string) {\n    this.graphql.setHeaders({ 'x-hasura-role': role })\n    this.storage.setHeaders({ 'x-hasura-role': role })\n    this.functions.setHeaders({ 'x-hasura-role': role })\n  }\n\n  /**\n   * Use `nhost.unsetRole` to unset the user role for all subsequent graphql, storage and functions calls.\n   * Underneath, this method removes the `x-hasura-role` header from the graphql, storage and functions clients.\n   *\n   * Note: Exercise caution when mixing the use of `unsetRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.unsetRole()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/unset-role\n   */\n  unsetRole() {\n    this.graphql.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.graphql.getHeaders()))\n    this.storage.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.storage.getHeaders()))\n    this.functions.setHeaders(\n      (({ 'x-hasura-role': _, ...rest }) => rest)(this.functions.getHeaders())\n    )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}