{"ast":null,"code":"import f from \"isomorphic-unfetch\";\nimport { parse as m, print as T } from \"graphql\";\nimport { jwtDecode as k } from \"jwt-decode\";\nfunction g(r, e, s) {\n  return r.document ? r : {\n    document: r,\n    variables: e,\n    config: s\n  };\n}\nfunction c(r) {\n  var n;\n  let e;\n  const s = r.definitions.filter(t => t.kind === \"OperationDefinition\");\n  return s.length === 1 && (e = (n = s[0].name) == null ? void 0 : n.value), e;\n}\nfunction y(r) {\n  if (typeof r == \"string\") {\n    let s;\n    try {\n      const n = m(r);\n      s = c(n);\n    } catch {}\n    return {\n      query: r,\n      operationName: s\n    };\n  }\n  const e = c(r);\n  return {\n    query: T(r),\n    operationName: e\n  };\n}\nclass x {\n  constructor(e) {\n    this.headers = {}, this.isAccessTokenValidOrNull = () => {\n      if (!this.accessToken) return !0;\n      try {\n        const t = k(this.accessToken);\n        return t.exp != null && t.exp * 1e3 > Date.now();\n      } catch (t) {\n        return console.error(\"Error decoding token:\", t), !1;\n      }\n    }, this.awaitForValidAccessTokenOrNull = async () => {\n      if (this.isAccessTokenValidOrNull()) return !0;\n      const t = () => this.isAccessTokenValidOrNull() ? Promise.resolve(!0) : new Promise(i => {\n        setTimeout(() => t().then(i), 100);\n      });\n      return t();\n    };\n    const {\n      url: s,\n      adminSecret: n\n    } = e;\n    this._url = s, this.accessToken = null, this.adminSecret = n;\n  }\n  async request(e, ...s) {\n    const [n, t] = s,\n      i = g(e, n, t),\n      {\n        headers: l,\n        ...h\n      } = t || {},\n      {\n        query: d,\n        operationName: p\n      } = y(i.document);\n    typeof process != \"undefined\" && !process.env.TEST_MODE && (await this.awaitForValidAccessTokenOrNull());\n    try {\n      const a = await f(this.httpUrl, {\n        method: \"POST\",\n        body: JSON.stringify({\n          operationName: p,\n          query: d,\n          variables: n\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...this.generateAccessTokenHeaders(),\n          ...this.headers,\n          // graphql client headers to be sent with all `request` calls\n          ...l\n          // extra headers to be sent with a specific call\n        },\n        ...h\n      });\n      if (!a.ok) return {\n        data: null,\n        error: {\n          error: a.statusText,\n          message: a.statusText,\n          status: a.status\n        }\n      };\n      const {\n        data: o,\n        errors: u\n      } = await a.json();\n      return u ? {\n        data: null,\n        error: u\n      } : typeof o != \"object\" || Array.isArray(o) || o === null ? {\n        data: null,\n        error: {\n          error: \"invalid-response\",\n          message: \"incorrect response data from GraphQL server\",\n          status: 0\n        }\n      } : {\n        data: o,\n        error: null\n      };\n    } catch (a) {\n      const o = a;\n      return {\n        data: null,\n        error: {\n          message: o.message,\n          status: o.name === \"AbortError\" ? 0 : 500,\n          error: o.name === \"AbortError\" ? \"abort-error\" : \"unknown\"\n        }\n      };\n    }\n  }\n  /**\n   * Use `nhost.graphql.httpUrl` to get the GraphQL HTTP URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.httpUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-http-url\n   */\n  get httpUrl() {\n    return this._url;\n  }\n  /**\n   * Use `nhost.graphql.wsUrl` to get the GraphQL WebSocket URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.wsUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-ws-url\n   */\n  get wsUrl() {\n    return this._url.replace(/^(http)(s?):\\/\\//, \"ws$2://\");\n  }\n  /**\n   * Use `nhost.graphql.url` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  get url() {\n    return this._url;\n  }\n  /**\n   * Use `nhost.graphql.getUrl()` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  getUrl() {\n    return this._url;\n  }\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-access-token\n   */\n  setAccessToken(e) {\n    if (!e) {\n      this.accessToken = null;\n      return;\n    }\n    this.accessToken = e;\n  }\n  /**\n   * Use `nhost.graphql.getHeaders` to get the global headers sent with all graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-headers\n   */\n  getHeaders() {\n    return this.headers;\n  }\n  /**\n   * Use `nhost.graphql.setHeaders` to set global headers to be sent in all subsequent graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-headers\n   */\n  setHeaders(e) {\n    e && (this.headers = {\n      ...this.headers,\n      ...e\n    });\n  }\n  /**\n   * Use `nhost.graphql.unsetHeaders` to remove global headers sent with all requests, except for the role header to preserve\n   * the role set by 'setRole' method.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/unset-headers\n   */\n  unsetHeaders() {\n    const e = this.headers[\"x-hasura-role\"];\n    this.headers = e ? {\n      \"x-hasura-role\": e\n    } : {};\n  }\n  generateAccessTokenHeaders() {\n    return this.adminSecret ? {\n      \"x-hasura-admin-secret\": this.adminSecret\n    } : this.accessToken ? {\n      Authorization: `Bearer ${this.accessToken}`\n    } : {};\n  }\n}\nexport { x as NhostGraphqlClient };","map":{"version":3,"names":["g","r","e","s","document","variables","config","c","definitions","filter","t","kind","length","n","name","value","y","m","query","operationName","T","x","constructor","headers","isAccessTokenValidOrNull","accessToken","k","exp","Date","now","console","error","awaitForValidAccessTokenOrNull","waitForValidTokenOrNull","Promise","resolve","i","setTimeout","then","url","adminSecret","_url","request","l","h","d","p","process","env","TEST_MODE","a","f","httpUrl","method","body","JSON","stringify","generateAccessTokenHeaders","ok","data","statusText","message","status","o","errors","u","json","Array","isArray","wsUrl","replace","getUrl","setAccessToken","getHeaders","setHeaders","unsetHeaders","Authorization"],"sources":["D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\graphql-js\\src\\parse-args.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\graphql-js\\src\\resolve-request-document.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\graphql-js\\src\\client.ts"],"sourcesContent":["import { RequestDocument, RequestOptions, Variables } from './types'\n\nexport function parseRequestArgs<V extends Variables = Variables>(\n  documentOrOptions: RequestDocument | RequestOptions<V>,\n  variables?: V,\n  config?: RequestInit\n): RequestOptions<V> {\n  return (\n    (documentOrOptions as RequestOptions<V>).document\n      ? documentOrOptions\n      : {\n          document: documentOrOptions,\n          variables,\n          config\n        }\n  ) as RequestOptions<V>\n}\n","import { DocumentNode, OperationDefinitionNode, parse, print } from 'graphql'\nimport { RequestDocument } from './types'\n\n/**\n * helpers\n */\n\nfunction extractOperationName(document: DocumentNode): string | undefined {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === 'OperationDefinition'\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0].name?.value\n  }\n\n  return operationName\n}\n\nexport function resolveRequestDocument(document: RequestDocument): {\n  query: string\n  operationName?: string\n} {\n  if (typeof document === 'string') {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n","import { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport fetch from 'isomorphic-unfetch'\nimport { parseRequestArgs } from './parse-args'\nimport { resolveRequestDocument } from './resolve-request-document'\nimport {\n  NhostGraphqlConstructorParams,\n  NhostGraphqlRequestConfig,\n  NhostGraphqlRequestResponse,\n  RemoveIndex,\n  RequestDocument,\n  RequestOptions,\n  Variables\n} from './types'\n\nimport { jwtDecode, JwtPayload } from 'jwt-decode'\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  readonly _url: string\n  private accessToken: string | null\n  private adminSecret?: string\n  private headers: Record<string, string> = {}\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this._url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n  }\n\n  private isAccessTokenValidOrNull = () => {\n    if (!this.accessToken) {\n      return true\n    }\n\n    try {\n      const decodedToken = jwtDecode(this.accessToken) as JwtPayload\n      return decodedToken.exp != null && decodedToken.exp * 1000 > Date.now()\n    } catch (error) {\n      console.error('Error decoding token:', error)\n      return false\n    }\n  }\n\n  private awaitForValidAccessTokenOrNull = async () => {\n    if (this.isAccessTokenValidOrNull()) {\n      return true\n    }\n\n    const waitForValidTokenOrNull = () => {\n      if (this.isAccessTokenValidOrNull()) {\n        return Promise.resolve(true)\n      }\n      return new Promise((resolve) => {\n        setTimeout(() => waitForValidTokenOrNull().then(resolve), 100)\n      })\n    }\n\n    return waitForValidTokenOrNull()\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/request\n   */\n  request<T = any, V = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never>\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : keyof RemoveIndex<V> extends never\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : [variables: V, config?: NhostGraphqlRequestConfig]\n  ): Promise<NhostGraphqlRequestResponse<T>>\n  async request<T = any, V extends Variables = Variables>(\n    options: RequestOptions<V, T>\n  ): Promise<NhostGraphqlRequestResponse<T>>\n  async request<T = any, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never>\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : keyof RemoveIndex<V> extends never\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : [variables: V, config?: NhostGraphqlRequestConfig]\n  ): Promise<NhostGraphqlRequestResponse<T>> {\n    const [variables, config] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, config)\n\n    const { headers: extraHeaders, ...otherOptions } = config || {}\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    if (typeof process !== 'undefined' && !process.env.TEST_MODE) {\n      // We skip this while running unit tests because the accessToken is generated using faker\n      await this.awaitForValidAccessTokenOrNull()\n    }\n\n    try {\n      const response = await fetch(this.httpUrl, {\n        method: 'POST',\n        body: JSON.stringify({\n          operationName,\n          query,\n          variables\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.generateAccessTokenHeaders(),\n          ...this.headers, // graphql client headers to be sent with all `request` calls\n          ...extraHeaders // extra headers to be sent with a specific call\n        },\n        ...otherOptions\n      })\n      if (!response.ok) {\n        return {\n          data: null,\n          error: {\n            error: response.statusText,\n            message: response.statusText,\n            status: response.status\n          }\n        }\n      }\n      const { data, errors } = await response.json()\n\n      if (errors) {\n        return {\n          data: null,\n          error: errors\n        }\n      }\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: {\n            error: 'invalid-response',\n            message: 'incorrect response data from GraphQL server',\n            status: 0\n          }\n        }\n      }\n\n      return { data, error: null }\n    } catch (e) {\n      const error = e as Error\n      return {\n        data: null,\n        error: {\n          message: error.message,\n          status: error.name === 'AbortError' ? 0 : 500,\n          error: error.name === 'AbortError' ? 'abort-error' : 'unknown'\n        }\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.httpUrl` to get the GraphQL HTTP URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.httpUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-http-url\n   */\n  get httpUrl(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.wsUrl` to get the GraphQL WebSocket URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.wsUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-ws-url\n   */\n  get wsUrl(): string {\n    return this._url.replace(/^(http)(s?):\\/\\//, 'ws$2://')\n  }\n\n  /**\n   * Use `nhost.graphql.url` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  get url(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl()` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  getUrl(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  /**\n   * Use `nhost.graphql.getHeaders` to get the global headers sent with all graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-headers\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Use `nhost.graphql.setHeaders` to set global headers to be sent in all subsequent graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-headers\n   */\n  setHeaders(headers?: Record<string, string>) {\n    if (!headers) {\n      return\n    }\n\n    this.headers = {\n      ...this.headers,\n      ...headers\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.unsetHeaders` to remove global headers sent with all requests, except for the role header to preserve\n   * the role set by 'setRole' method.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/unset-headers\n   */\n  unsetHeaders() {\n    const userRole = this.headers['x-hasura-role']\n\n    // preserve the user role header to avoid invalidating preceding 'setRole' call.\n    this.headers = userRole ? { 'x-hasura-role': userRole } : {}\n  }\n\n  private generateAccessTokenHeaders(): NhostGraphqlRequestConfig['headers'] {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}