{"ast":null,"code":"import { gql } from '@apollo/client';\n\n// Chat Queries\nexport const GET_CHATS = gql`\n  query GetChats {\n    chats(order_by: { updated_at: desc }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;\nexport const GET_CHAT_MESSAGES = gql`\n  query GetChatMessages($chatId: uuid!) {\n    messages(\n      where: { chat_id: { _eq: $chatId } }\n      order_by: { created_at: asc }\n    ) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\n\n// Chat Mutations\nexport const CREATE_CHAT = gql`\n  mutation CreateChat($title: String!) {\n    insert_chats_one(object: { title: $title }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;\nexport const INSERT_MESSAGE = gql`\n  mutation InsertMessage($chat_id: uuid!, $content: String!, $role: String!) {\n    insert_messages_one(object: { \n      chat_id: $chat_id, \n      content: $content, \n      role: $role \n    }) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\n\n// Hasura Action for sending message to chatbot\nexport const SEND_MESSAGE_TO_CHATBOT = gql`\n  mutation SendMessageToChatbot($chat_id: uuid!, $message: String!) {\n    sendMessage(chat_id: $chat_id, message: $message) {\n      success\n      message\n      error\n    }\n  }\n`;\n\n// Subscriptions\nexport const SUBSCRIBE_TO_MESSAGES = gql`\n  subscription SubscribeToMessages($chatId: uuid!) {\n    messages(\n      where: { chat_id: { _eq: $chatId } }\n      order_by: { created_at: asc }\n    ) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\nexport const SUBSCRIBE_TO_CHATS = gql`\n  subscription SubscribeToChats {\n    chats(order_by: { updated_at: desc }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;","map":{"version":3,"names":["gql","GET_CHATS","GET_CHAT_MESSAGES","CREATE_CHAT","INSERT_MESSAGE","SEND_MESSAGE_TO_CHATBOT","SUBSCRIBE_TO_MESSAGES","SUBSCRIBE_TO_CHATS"],"sources":["D:/chatb/chatbot-app/frontend/src/graphql/operations.ts"],"sourcesContent":["import { gql } from '@apollo/client';\n\n// Chat Queries\nexport const GET_CHATS = gql`\n  query GetChats {\n    chats(order_by: { updated_at: desc }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;\n\nexport const GET_CHAT_MESSAGES = gql`\n  query GetChatMessages($chatId: uuid!) {\n    messages(\n      where: { chat_id: { _eq: $chatId } }\n      order_by: { created_at: asc }\n    ) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\n\n// Chat Mutations\nexport const CREATE_CHAT = gql`\n  mutation CreateChat($title: String!) {\n    insert_chats_one(object: { title: $title }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;\n\nexport const INSERT_MESSAGE = gql`\n  mutation InsertMessage($chat_id: uuid!, $content: String!, $role: String!) {\n    insert_messages_one(object: { \n      chat_id: $chat_id, \n      content: $content, \n      role: $role \n    }) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\n\n// Hasura Action for sending message to chatbot\nexport const SEND_MESSAGE_TO_CHATBOT = gql`\n  mutation SendMessageToChatbot($chat_id: uuid!, $message: String!) {\n    sendMessage(chat_id: $chat_id, message: $message) {\n      success\n      message\n      error\n    }\n  }\n`;\n\n// Subscriptions\nexport const SUBSCRIBE_TO_MESSAGES = gql`\n  subscription SubscribeToMessages($chatId: uuid!) {\n    messages(\n      where: { chat_id: { _eq: $chatId } }\n      order_by: { created_at: asc }\n    ) {\n      id\n      content\n      role\n      created_at\n      chat_id\n      user_id\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_CHATS = gql`\n  subscription SubscribeToChats {\n    chats(order_by: { updated_at: desc }) {\n      id\n      title\n      created_at\n      updated_at\n      user_id\n    }\n  }\n`;"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;;AAEpC;AACA,OAAO,MAAMC,SAAS,GAAGD,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAGF,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAGH,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMI,cAAc,GAAGJ,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMK,uBAAuB,GAAGL,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMM,qBAAqB,GAAGN,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAGP,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}