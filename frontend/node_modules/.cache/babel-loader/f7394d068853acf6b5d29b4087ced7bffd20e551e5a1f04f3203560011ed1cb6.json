{"ast":null,"code":"import { createHttpLink as M, split as P, from as G, ApolloClient as V, InMemoryCache as g } from \"@apollo/client/core\";\nimport { setContext as H } from \"@apollo/client/link/context\";\nimport { GraphQLWsLink as U } from \"@apollo/client/link/subscriptions\";\nimport { getMainDefinition as W } from \"@apollo/client/utilities\";\nimport { jwtDecode as _ } from \"jwt-decode\";\nimport { createClient as L } from \"graphql-ws\";\nfunction R(n) {\n  let c = !1,\n    l = () => {\n      c = !0;\n    },\n    p = !1,\n    u,\n    m;\n  const w = L({\n    ...n,\n    on: {\n      ...n.on,\n      error: i => {\n        var t, a;\n        console.error(i), (a = (t = n.on) == null ? void 0 : t.error) == null || a.call(t, i), l();\n      },\n      ping: i => {\n        i || (m = setTimeout(() => {\n          w.terminate(), l();\n        }, 5e3));\n      },\n      pong: i => {\n        i && clearTimeout(m);\n      },\n      opened: i => {\n        var t, a;\n        u = i, (a = (t = n.on) == null ? void 0 : t.opened) == null || a.call(t, u), p = !0, l = () => {\n          u.readyState === WebSocket.OPEN ? u.close(4205, \"Client Restart\") : c = !0;\n        }, c && (c = !1, l());\n      },\n      closed: i => {\n        var t, a;\n        (a = (t = n == null ? void 0 : n.on) == null ? void 0 : t.closed) == null || a.call(t, i), p = !1;\n      }\n    }\n  });\n  return {\n    ...w,\n    restart: () => l(),\n    isOpen: () => p\n  };\n}\nconst O = typeof window != \"undefined\",\n  j = ({\n    nhost: n,\n    graphqlUrl: c,\n    headers: l = {},\n    publicRole: p = \"public\",\n    fetchPolicy: u,\n    cache: m = new g(),\n    connectToDevTools: w = O && process.env.NODE_ENV === \"development\",\n    onError: i,\n    link: t,\n    generateLinks: a\n  }) => {\n    const N = c || (n == null ? void 0 : n.graphql.httpUrl);\n    if (!N) throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\");\n    const h = N,\n      k = n == null ? void 0 : n.auth.client.interpreter;\n    let e = null;\n    const x = () => {\n        if (!(e != null && e.value)) return !1;\n        const o = 3 * 1e3;\n        return _(e.value).exp * 1e3 > Date.now() - o;\n      },\n      E = () => !!(e != null && e.value) && !!(e != null && e.expiresAt) && (e == null ? void 0 : e.expiresAt) > /* @__PURE__ */new Date() && x(),\n      D = () => !e || E(),\n      v = () => {\n        if (D()) return Promise.resolve();\n        const r = () => D() ? Promise.resolve(!0) : new Promise(o => {\n          setTimeout(() => r().then(o), 100);\n        });\n        return r();\n      },\n      b = async () => {\n        await v();\n        const r = {\n          ...l,\n          \"Sec-WebSocket-Protocol\": \"graphql-ws\"\n        };\n        return e ? r.authorization = `Bearer ${e.value}` : r.role = p, r;\n      },\n      s = O ? R({\n        url: h.startsWith(\"https\") ? h.replace(/^https/, \"wss\") : h.replace(/^http/, \"ws\"),\n        shouldRetry: () => !0,\n        retryAttempts: 100,\n        retryWait: async r => new Promise(y => setTimeout(y, 1e3 * Math.pow(2, r) + Math.floor(Math.random() * 3e3))),\n        connectionParams: async () => ({\n          headers: {\n            ...l,\n            ...(await b())\n          }\n        })\n      }) : null,\n      A = s ? new U(s) : null,\n      S = H(async (r, {\n        headers: o\n      }) => ({\n        headers: {\n          ...o,\n          ...(await b())\n        }\n      })).concat(M({\n        uri: h\n      })),\n      C = A ? P(({\n        query: r\n      }) => {\n        const o = W(r),\n          {\n            kind: f\n          } = o;\n        let y;\n        return \"operation\" in o && (y = o.operation), f === \"OperationDefinition\" && y === \"subscription\";\n      }, A, S) : S,\n      d = [];\n    i && d.push(i), t && d.push(t), d.push(C);\n    const I = G(a ? a(d) : d),\n      T = new V({\n        cache: m || new g(),\n        ssrMode: !O,\n        defaultOptions: {\n          watchQuery: {\n            fetchPolicy: u\n          }\n        },\n        connectToDevTools: w,\n        link: I\n      });\n    return k == null || k.onTransition(async (r, o) => {\n      if ([\"SIGNOUT\", \"SIGNED_IN\", \"TOKEN_CHANGED\"].includes(o.type)) {\n        if (o.type === \"SIGNOUT\" || o.type === \"TOKEN_CHANGED\" && r.context.accessToken.value === null) {\n          e = null;\n          try {\n            await T.resetStore();\n          } catch (f) {\n            console.error(\"Error resetting Apollo client cache\"), console.error(f);\n          }\n          return;\n        }\n        if (e = r.context.accessToken, !O || !(s != null && s.isOpen())) return;\n        s == null || s.restart();\n      }\n    }), T;\n  };\nexport { j as createApolloClient };","map":{"version":3,"names":["R","n","c","l","restart","p","u","m","w","L","on","error","i","console","a","t","call","ping","setTimeout","terminate","pong","clearTimeout","opened","readyState","WebSocket","OPEN","close","closed","isOpen","O","window","j","createApolloClient","nhost","graphqlUrl","headers","publicRole","fetchPolicy","cache","g","connectToDevTools","process","env","NODE_ENV","onError","link","generateLinks","N","graphql","httpUrl","Error","h","k","auth","client","interpreter","e","x","isJwtValid","value","o","_","exp","Date","now","E","isTokenValid","expiresAt","D","isTokenValidOrNull","v","awaitValidTokenOrNull","Promise","resolve","r","waitForValidToken","then","b","getAuthHeaders","authorization","role","s","url","startsWith","replace","shouldRetry","retryAttempts","retryWait","y","Math","pow","floor","random","connectionParams","A","U","S","H","concat","M","uri","C","P","query","W","kind","f","operation","d","push","I","G","T","V","ssrMode","defaultOptions","watchQuery","onTransition","includes","type","context","accessToken","resetStore"],"sources":["D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\apollo\\src\\ws.ts","D:\\chatb\\chatbot-app\\frontend\\node_modules\\@nhost\\apollo\\src\\index.ts"],"sourcesContent":["// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  isOpen(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n\n  let connectionOpen = false\n  let socket: WebSocket\n  let timedOut: NodeJS.Timeout\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      error: (error) => {\n        console.error(error)\n        options.on?.error?.(error)\n\n        restart()\n      },\n      ping: (received) => {\n        if (!received /* sent */) {\n          timedOut = setTimeout(() => {\n            // a close event `4499: Terminated` is issued to the current WebSocket and an\n            // artificial `{ code: 4499, reason: 'Terminated', wasClean: false }` close-event-like\n            // object is immediately emitted without waiting for the one coming from `WebSocket.onclose`\n            //\n            // calling terminate is not considered fatal and a connection retry will occur as expected\n            //\n            // see: https://github.com/enisdenjo/graphql-ws/discussions/290\n            client.terminate()\n            restart()\n          }, 5_000)\n        }\n      },\n      pong: (received) => {\n        if (received) {\n          clearTimeout(timedOut)\n        }\n      },\n      opened: (originalSocket) => {\n        socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n        connectionOpen = true\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      },\n      closed: (event) => {\n        options?.on?.closed?.(event)\n        connectionOpen = false\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    isOpen: () => connectionOpen\n  }\n}\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { AuthContext, NhostClient } from '@nhost/nhost-js'\nimport { jwtDecode, JwtPayload } from 'jwt-decode'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  onError?: RequestHandler\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  link?: ApolloLink\n  generateLinks?: (links: (ApolloLink | RequestHandler)[]) => (ApolloLink | RequestHandler)[]\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError,\n  link: customLink,\n  generateLinks\n}: NhostApolloClientOptions) => {\n  const backendUrl = graphqlUrl || nhost?.graphql.httpUrl\n\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n\n  const uri = backendUrl\n  const interpreter = nhost?.auth.client.interpreter\n\n  let accessToken: AuthContext['accessToken'] | null = null\n\n  const isJwtValid = () => {\n    if (!accessToken?.value) {\n      return false\n    }\n\n    const marginInSeconds = 3\n    const marginInMilliseconds = marginInSeconds * 1000\n\n    let decodedToken = jwtDecode(accessToken.value) as JwtPayload\n    return decodedToken.exp! * 1000 > Date.now() - marginInMilliseconds\n  }\n\n  const isTokenValid = () =>\n    !!accessToken?.value &&\n    !!accessToken?.expiresAt &&\n    accessToken?.expiresAt > new Date() &&\n    isJwtValid()\n\n  const isTokenValidOrNull = () => !accessToken || isTokenValid()\n\n  const awaitValidTokenOrNull = () => {\n    if (isTokenValidOrNull()) {\n      return Promise.resolve()\n    }\n\n    const waitForValidToken = () => {\n      if (isTokenValidOrNull()) {\n        return Promise.resolve(true)\n      }\n      return new Promise((resolve) => {\n        setTimeout(() => waitForValidToken().then(resolve), 100)\n      })\n    }\n\n    return waitForValidToken()\n  }\n\n  const getAuthHeaders = async () => {\n    // wait for valid access token\n    await awaitValidTokenOrNull()\n\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (accessToken) {\n      resHeaders.authorization = `Bearer ${accessToken.value}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const wsClient = isBrowser\n    ? createRestartableClient({\n        url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n        shouldRetry: () => true,\n        retryAttempts: 100,\n        retryWait: async (retries) => {\n          // start with 1 second delay\n          const baseDelay = 1000\n\n          // max 3 seconds of jitter\n          const maxJitter = 3000\n\n          // exponential backoff with jitter\n          return new Promise((resolve) =>\n            setTimeout(\n              resolve,\n              baseDelay * Math.pow(2, retries) + Math.floor(Math.random() * maxJitter)\n            )\n          )\n        },\n        connectionParams: async () => ({\n          headers: {\n            ...headers,\n            ...(await getAuthHeaders())\n          }\n        })\n      })\n    : null\n\n  const wsLink = wsClient ? new GraphQLWsLink(wsClient) : null\n\n  const httpLink = setContext(async (_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...(await getAuthHeaders())\n      }\n    }\n  }).concat(createHttpLink({ uri }))\n\n  const splitLink = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const links = []\n\n  if (onError) {\n    links.push(onError)\n  }\n\n  if (customLink) {\n    links.push(customLink)\n  }\n\n  links.push(splitLink)\n\n  const link = from(generateLinks ? generateLinks(links) : links)\n\n  const client = new ApolloClient({\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools,\n    link\n  })\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      if (\n        event.type === 'SIGNOUT' ||\n        (event.type === 'TOKEN_CHANGED' && state.context.accessToken.value === null)\n      ) {\n        accessToken = null\n\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n\n        return\n      }\n\n      // update token\n      accessToken = state.context.accessToken\n\n      if (!isBrowser || !wsClient?.isOpen()) {\n        return\n      }\n\n      wsClient?.restart()\n    }\n  })\n\n  return client\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}